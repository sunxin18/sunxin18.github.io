<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lalala</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunxin18.github.io/"/>
  <updated>2020-06-02T11:37:23.465Z</updated>
  <id>https://sunxin18.github.io/</id>
  
  <author>
    <name>Sunxin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>transformer</title>
    <link href="https://sunxin18.github.io/2020/05/31/transformer/"/>
    <id>https://sunxin18.github.io/2020/05/31/transformer/</id>
    <published>2020-05-31T01:51:27.000Z</published>
    <updated>2020-06-02T11:37:23.465Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>seq2seq主要有下面两个不足：</p><ul><li>long—term dependency 会出现梯度消失或者爆炸</li><li>只能串行 时序的模型，后面的运算必须依赖于前面的运算<br>我们知道同一个单词可能在不同的语境中可能有不同的意思也就是需要不同的向量表达，这个表达依赖于上下文的意思，其他单词也影响着这个单词的意思，<br>transformer就改进了这块的不足。</li></ul><h2 id="transformer的优点"><a class="markdownIt-Anchor" href="#transformer的优点"></a> transformer的优点</h2><p>RNN会将它已经处理过的前面的所有单词/向量的表示与它正在处理的当前单词/向量结合起来。而自注意力机制会将所有相关单词的理解融入到我们正在处理的单词中。</p><h2 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h2><p><a href="/2020/05/31/transformer/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/31/transformer/1.png" alt title></a><br>首先输入就是每个单词的embedding，比如可以是glove训练出来的，然后有三个参数矩阵，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>W</mi><mi>o</mi></msup><mo separator="true">,</mo><msup><mi>W</mi><mi>k</mi></msup><mo separator="true">,</mo><msup><mi>W</mi><mi>v</mi></msup><mo separator="true">,</mo><mi mathvariant="normal">然</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">输</mi><mi mathvariant="normal">入</mi><mi mathvariant="normal">向</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">分</mi><mi mathvariant="normal">别</mi><mi mathvariant="normal">与</mi><mi mathvariant="normal">三</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">矩</mi><mi mathvariant="normal">阵</mi><mi mathvariant="normal">相</mi><mi mathvariant="normal">乘</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">得</mi><mi mathvariant="normal">到</mi><mi mathvariant="normal">三</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">向</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">，</mi></mrow><annotation encoding="application/x-tex">W^{o},W^{k},W^{v},然后输入向量分别与三个矩阵相乘，得到三个向量，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.043548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">然</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">别</span><span class="mord cjk_fallback">与</span><span class="mord cjk_fallback">三</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">矩</span><span class="mord cjk_fallback">阵</span><span class="mord cjk_fallback">相</span><span class="mord cjk_fallback">乘</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">三</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">，</span></span></span></span>q1,k1,v1<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo separator="true">,</mo><mi mathvariant="normal">这</mi><mi mathvariant="normal">里</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">向</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">比</mi><mi mathvariant="normal">原</mi><mi mathvariant="normal">始</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>d</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi mathvariant="normal">向</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">更</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">低</mi><mi mathvariant="normal">维</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">表</mi><mi mathvariant="normal">达</mi></mrow><annotation encoding="application/x-tex">,这里的向量是一个比原始embedding向量更加低维的表达</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">原</span><span class="mord cjk_fallback">始</span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">更</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">低</span><span class="mord cjk_fallback">维</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">达</span></span></span></span>q1 \cdot k1,q1 \cdot k2,q1 \cdot k3…<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">得</mi><mi mathvariant="normal">到</mi><mi mathvariant="normal">了</mi><mi mathvariant="normal">每</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">单</mi><mi mathvariant="normal">词</mi><mi mathvariant="normal">的</mi><mi>s</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>e</mi><mi mathvariant="normal">向</mi><mi mathvariant="normal">量</mi><mo stretchy="false">(</mo><mi mathvariant="normal">里</mi><mi mathvariant="normal">面</mi><mi mathvariant="normal">每</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">维</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">值</mi><mi mathvariant="normal">就</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">两</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">单</mi><mi mathvariant="normal">词</mi><mi mathvariant="normal">的</mi><mi>a</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">)</mo><mi mathvariant="normal">，</mi><mi mathvariant="normal">比</mi><mi mathvariant="normal">如</mi><mn>112</mn><mi mathvariant="normal">、</mi><mn>96</mn><mi mathvariant="normal">，</mi><mi mathvariant="normal">如</mi><mi mathvariant="normal">果</mi><mi mathvariant="normal">我</mi><mi mathvariant="normal">们</mi><mi mathvariant="normal">直</mi><mi mathvariant="normal">接</mi><mi mathvariant="normal">用</mi><mi mathvariant="normal">和</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">归</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">化</mi></mrow><annotation encoding="application/x-tex">得到了每个单词的score向量(里面每一维的值就是两个单词的attention)，比如112、96，如果我们直接用和的归一化</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">了</span><span class="mord cjk_fallback">每</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">词</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mopen">(</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">每</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">维</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">词</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">如</span><span class="mord">1</span><span class="mord">1</span><span class="mord">2</span><span class="mord cjk_fallback">、</span><span class="mord">9</span><span class="mord">6</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">果</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">直</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">和</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">归</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">化</span></span></span></span>\frac{112}{112+96}<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3em;vertical-align:-0.19444em;"></span><span class="mpunct">,</span></span></span></span>\frac{96}{112+96}<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">则</mi><mi mathvariant="normal">这</mi><mi mathvariant="normal">两</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">值</mi><mi mathvariant="normal">会</mi><mi mathvariant="normal">比</mi><mi mathvariant="normal">较</mi><mi mathvariant="normal">接</mi><mi mathvariant="normal">近</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">如</mi><mi mathvariant="normal">果</mi><mi mathvariant="normal">直</mi><mi mathvariant="normal">接</mi><mi mathvariant="normal">送</mi><mi mathvariant="normal">到</mi><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mi mathvariant="normal">，</mi></mrow><annotation encoding="application/x-tex">则这两个值会比较接近，如果直接送到softmax，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">则</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">较</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">近</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">果</span><span class="mord cjk_fallback">直</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">送</span><span class="mord cjk_fallback">到</span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mord cjk_fallback">，</span></span></span></span>\frac{e<sup>{112}}{e</sup>{112}+e<sup>{96}}$,$\frac{e</sup>{96}}{e<sup>{112}+e</sup>{96}}<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo separator="true">,</mo><mi mathvariant="normal">这</mi><mi mathvariant="normal">两</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">值</mi><mi mathvariant="normal">就</mi><mi mathvariant="normal">会</mi><mi mathvariant="normal">分</mi><mi mathvariant="normal">别</mi><mi mathvariant="normal">接</mi><mi mathvariant="normal">近</mi><mn>0</mn><mi mathvariant="normal">和</mi><mn>1</mn><mi mathvariant="normal">了</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">没</mi><mi mathvariant="normal">有</mi><mi mathvariant="normal">区</mi><mi mathvariant="normal">分</mi><mi mathvariant="normal">度</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">所</mi><mi mathvariant="normal">以</mi><mi mathvariant="normal">这</mi><mi mathvariant="normal">里</mi><mi mathvariant="normal">我</mi><mi mathvariant="normal">们</mi><mi mathvariant="normal">对</mi><mi>s</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>e</mi><mi mathvariant="normal">向</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">除</mi><mi mathvariant="normal">以</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">个</mi></mrow><annotation encoding="application/x-tex">,这两个值就会分别接近0和1了，没有区分度，所以这里我们对score向量除以一个</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">别</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">近</span><span class="mord">0</span><span class="mord cjk_fallback">和</span><span class="mord">1</span><span class="mord cjk_fallback">了</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">没</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">区</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">度</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">对</span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">除</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span></span></span></span>\sqrt{d}<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3em;vertical-align:-0.19444em;"></span><span class="mpunct">,</span></span></span></span>d<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">就</mi><mi mathvariant="normal">是</mi></mrow><annotation encoding="application/x-tex">就是</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">是</span></span></span></span>q<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">的</mi><mi mathvariant="normal">维</mi><mi mathvariant="normal">度</mi><mi mathvariant="normal">（</mi><mi mathvariant="normal">论</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">里</mi><mi mathvariant="normal">是</mi><mn>8</mn><mi mathvariant="normal">，</mi><mi mathvariant="normal">也</mi><mi mathvariant="normal">就</mi><mi mathvariant="normal">是</mi><mn>64</mn><mi mathvariant="normal">维</mi><mi mathvariant="normal">度</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">求</mi><mi mathvariant="normal">根</mi><mi mathvariant="normal">值</mi><mi mathvariant="normal">）</mi><mi mathvariant="normal">再</mi><mi mathvariant="normal">进</mi><mi mathvariant="normal">行</mi><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">然</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">对</mi><mi mathvariant="normal">第</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">单</mi><mi mathvariant="normal">词</mi><mi mathvariant="normal">的</mi><mi>s</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>e</mi><mi mathvariant="normal">向</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">分</mi><mi mathvariant="normal">别</mi><mi mathvariant="normal">与</mi></mrow><annotation encoding="application/x-tex">的维度（论文里是8，也就是64维度的求根值）再进行softmax，然后对第一个单词的score向量分别与</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">维</span><span class="mord cjk_fallback">度</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">论</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">是</span><span class="mord">8</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">也</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">是</span><span class="mord">6</span><span class="mord">4</span><span class="mord cjk_fallback">维</span><span class="mord cjk_fallback">度</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">根</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">再</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">行</span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">然</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">词</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">别</span><span class="mord cjk_fallback">与</span></span></span></span>v1,v2,v3…<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">相</mi><mi mathvariant="normal">乘</mi><mi mathvariant="normal">得</mi><mi mathvariant="normal">到</mi></mrow><annotation encoding="application/x-tex">相乘得到</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">相</span><span class="mord cjk_fallback">乘</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span></span></span></span>z1<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">，</mi></mrow><annotation encoding="application/x-tex">，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">，</span></span></span></span>z1$相当于考虑了整个句子了，这个整体就是一层的encoder block</p><h2 id="矩阵化操作"><a class="markdownIt-Anchor" href="#矩阵化操作"></a> 矩阵化操作</h2><p>首先是矩阵化求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mo separator="true">,</mo><mi>k</mi><mo separator="true">,</mo><mi>v</mi></mrow><annotation encoding="application/x-tex">q,k,v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>看下面图很容易理解<br><a href="/2020/05/31/transformer/2.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/31/transformer/2.png" alt title></a><br>每个attention我们是通过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mn>1</mn><mo>⋅</mo><mi>k</mi><mn>1</mn><mo separator="true">,</mo><mi>q</mi><mn>1</mn><mo>⋅</mo><mi>k</mi><mn>2</mn><mo separator="true">,</mo><mi>q</mi><mn>1</mn><mo>⋅</mo><mi>k</mi><mn>3...</mn></mrow><annotation encoding="application/x-tex">q1 \cdot k1,q1 \cdot k2,q1 \cdot k3...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">3</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>，我们就可以个把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mn>1</mn><mo separator="true">,</mo><mi>k</mi><mn>2..</mn></mrow><annotation encoding="application/x-tex">k1,k2..</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mord">.</span><span class="mord">.</span></span></span></span>堆积起来到一个矩阵和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">q1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span></span></span></span>进行相乘得到attention向量<br><a href="/2020/05/31/transformer/3.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/31/transformer/3.png" alt title></a><br>可以再进一步矩阵化，我们把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mn>1</mn><mo separator="true">,</mo><mi>q</mi><mn>2...</mn></mrow><annotation encoding="application/x-tex">q1,q2...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">2</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>也堆积起来到一个矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span><br><a href="/2020/05/31/transformer/4.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/31/transformer/4.png" alt title></a><br>然后得到了attention score矩阵，每一个值都是两两个单词得到的attention值，除以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>d</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.10777999999999999em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.93222em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">d</span></span></span><span style="top:-2.89222em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.10777999999999999em;"><span></span></span></span></span></span></span></span></span>，再对每一列求softmax。<br>下面是对第一个单词的score向量分别与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mn>1</mn><mo separator="true">,</mo><mi>v</mi><mn>2</mn><mo separator="true">,</mo><mi>v</mi><mn>3...</mn></mrow><annotation encoding="application/x-tex">v1,v2,v3...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">3</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>相乘得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">z1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">1</span></span></span></span>(图里是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">b1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord">1</span></span></span></span>),这里把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>堆积起来，最终得到整个self-attention layer输出O矩阵<br><a href="/2020/05/31/transformer/5.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/31/transformer/5.png" alt title></a><br>总结起来就是：<br><a href="/2020/05/31/transformer/6.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/31/transformer/6.png" alt title></a></p><h2 id="multi-head-attention"><a class="markdownIt-Anchor" href="#multi-head-attention"></a> multi-head attention</h2><p>每个head关注点不一样</p><h2 id="疑惑"><a class="markdownIt-Anchor" href="#疑惑"></a> 疑惑</h2><p>attention考虑到了所有两两单词，无论是邻居还是远在天涯，但这样没有考虑单词的顺序了？<br>原始文章：加上位置向量，这不是学出来的参数，是人工加上的<br><a href="/2020/05/31/transformer/7.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/31/transformer/7.png" alt title></a><br>transformer和lstm可以说是一个并列的模型，也就是一定意义上可以相互替代</p><p>原论文：<a href="https://arxiv.org/abs/1706.03762" target="_blank" rel="noopener">https://arxiv.org/abs/1706.03762</a><br>参考文献：<a href="https://jalammar.github.io/illustrated-transformer/" target="_blank" rel="noopener">https://jalammar.github.io/illustrated-transformer/</a> 翻译：<a href="https://blog.csdn.net/longxinchen_ml/article/details/86533005" target="_blank" rel="noopener">https://blog.csdn.net/longxinchen_ml/article/details/86533005</a><br>参考视频:<br>台大李宏毅老师-深度学习HLP</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="自然语言处理" scheme="https://sunxin18.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="transformer" scheme="https://sunxin18.github.io/tags/transformer/"/>
    
  </entry>
  
  <entry>
    <title>博客美化专题</title>
    <link href="https://sunxin18.github.io/2020/05/27/blog-bea/"/>
    <id>https://sunxin18.github.io/2020/05/27/blog-bea/</id>
    <published>2020-05-27T03:53:30.000Z</published>
    <updated>2020-05-27T04:29:32.880Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="加入爱心页面"><a class="markdownIt-Anchor" href="#加入爱心页面"></a> 加入爱心页面</h1><p>感谢这位老哥的帮助：<a href="https://wangxe.top/" target="_blank" rel="noopener">https://wangxe.top/</a><br>首先新建一个html的page</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;html&quot;</span><br></pre></td></tr></table></figure></div><p>修改主题的config，加入下面<br><a href="/2020/05/27/blog-bea/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/27/blog-bea/1.png" alt title></a><br>将下载好的love文件夹放到\blog\source\html<br>修改config，跳过渲染，因为已经是html文件了，渲染是吧md文件到html：<br><a href="/2020/05/27/blog-bea/2.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/27/blog-bea/2.png" alt title></a></p><p>之后的细节按照自己的需要修改爱心文件即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="博客" scheme="https://sunxin18.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客美化专题" scheme="https://sunxin18.github.io/tags/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>bug</title>
    <link href="https://sunxin18.github.io/2020/05/24/bug/"/>
    <id>https://sunxin18.github.io/2020/05/24/bug/</id>
    <published>2020-05-24T02:09:37.000Z</published>
    <updated>2020-05-28T03:27:27.075Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="哎呀你输错了！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">该文章已加密, 请输入密码查看。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="078b0661e1bae353f61ee2a8c06dc7a8e64baa91af40a8dd55abfe2da1b70cf7">38cd76bef1cf79f27267863aa0f1e10aff0a55b3032fb665653565d974dcbbb6fb9e335fcb6f2cac947609853f0c56f0dbf7300ebc6e47358c153341a4c18fe59abedea6571c7603dd0c3ebeb08faededad4174f6c6eeda32fe389116f16e28f0210187cfa4a272439508fc90658c1b2309a116992d303d700f05971b0e4855d4f4ff589cfc7838359191bd9ee6077a648cc1789b19943078668c653d9694c0c484aaaa3e126d8a153c6e91c689217e9c1a3c94044ce8a2c75324091dd2b9507f971adb1fa080a90a1dcbab484be3b5c3ddafee8e02aac8682158bc35b66d84d3aa548a4c01c52d3482c8727cafa55f5793ab1eeaba23852b8679173024c1d6f6aa5e5fa4b793bdce312ecdb8ae54f91d7aff15ff9deca66782ea8fdf5e194780fbb49c60084fe17bc651bb4a28460bea328577199f18b81365e3c0c59786228c8c1e637266f44f453077ddc1b43cd6e2b252670ae75f4da5efc2db35683973d7a9d8321f26274e5aade8c984a77ce3b5a8f0036073db2433a25852fe4b6f97ec765d15a11b0c8c3cc847903c1b68fccf363c7aed27930deff82f4af0bf7217e7e6b42db2d402578c22619fa35a6fad85fac828e205d49fff3db64c733eb3804fa4985b7603e1aa26bcca3315caa72ab9210ea47fdef3802e2f962f5c7900bf0c6a4a51c48a7506ea0d4a63c4475e5dfb90df4af4022924a51b72c35b6b4edf8b217ba6fc91762adf7a601a1bf14d99e116e5f5f0a80a69fdd3905772ddd56e7f4ebab0db97b545f99240f5dd820e1e2b016cc8d39e2fc21cdcf0ce27bd3df27868b45539797acff30ad69ea71c3d6c109cc3bb62c4bdefc89efbc567a3e687ff80c187099962b352dc2502f4023eb1cf46580cda18a0ae16d8224150fd7e56c523e12b6fc67fc047dbf4ec8fe421975f0dd19b1addf537c6effed49cffcb3b04ba30633b31d258558b81a90d5fb76c9d2ece1bb617c07600702e8741b83ba884e12bec867a49ad9daa42a9662b7031dc0419835de953e148ce1e6876737bd9ca45f824f16e3f076bbf884fab592ee5ce1bdbb44c2643e7616c4fa64599de320ed8a4c5365967aefccb1acaa84005eeea5b9e241dfa5b17ef794f48444bcd9e18b8198b0f0d383108a7cd0e8d1e31068eaec3744d40b4ae5be9449f36589d3a35f6ffc04a2cc178edf276123d5439755e182f14970c937a0de5ce806c04e3d88fd6f064ed0af56c568eec1acdf683d76b93b44dbb3fef3f7221ddc0a52b689422260c60de93c6a8c8b777b0963cf2822aa9db5bf5f0205aabb2abde71805d0db92dd908818fd57a20c9848b7647b5b24b64da475023124d62772d76545f39cfc21ac688c909e318a3829adedc0e6d5b56433b632bcf23abf7ca8cae174e45d0a131c589827a3d57fd1479ee056a20b28d3185a57d1dbd8e114ecfc19d4ac117e96fd01dfc83b158b36a62fde5a84b96be6579df174077894f7d737ea68e58d0777048608e2c088ff6ae15c3bd042990a7e50dcbf4fc2cc71151f2385a61028faa5aa21cbc5dca2de47cddf3e8d3188a40e66e4e6d3f45cc3d460c1dd3c2749a71f8261e5279264a82140e2a481a864d1b4971cbd811acb4f3f481fb3c379e38cbaf7cb2de68a19c426646a809a31b4bb444d9916edd5f5b8e858860d1ca79c95ccc7fde8f750f92cd39d66f5a4a4179081a8734526ff96684c6303b8da586b1dcde6156123297a892d54b802c43075706da85a3e86bfd53c5201e0d8f6f7d1a6246efeac7810ef1431195514473eeeb69897c7ba93a3d019033913e90062de0b33c1cc8002457aa1fea3d696053cdeacc0e6928262ad5415c50f1b247fba5faf8feb3b9e9ace18bd20cd8f185b1f8474789eaa8c5b0f1b26f16f52349c264913baac2f1fee490188315d71cbed8ba823b881ec07fb3bb39d45ed9290266fa46a32c223fcd6217b53f97201e68c063ddae532dd53ba1bf9c3522d115e12bb000bb67b73d80f029a1e8971a25a7b11d46a</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="C++" scheme="https://sunxin18.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>520随笔</title>
    <link href="https://sunxin18.github.io/2020/05/20/520/"/>
    <id>https://sunxin18.github.io/2020/05/20/520/</id>
    <published>2020-05-20T12:16:10.000Z</published>
    <updated>2020-05-20T14:31:03.595Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="哎呀你输错了！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">哎别看了。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e650805b20d15f06d01d254b610ec5c8dd1a1ae0d8593b85c49f6f6537ee3fdc">38cd76bef1cf79f27267863aa0f1e10aff0a55b3032fb665653565d974dcbbb6fb9e335fcb6f2cac947609853f0c56f0dbf7300ebc6e47358c153341a4c18fe59abedea6571c7603dd0c3ebeb08faededad4174f6c6eeda32fe389116f16e28f0210187cfa4a272439508fc90658c1b2309a116992d303d700f05971b0e4855d4f4ff589cfc7838359191bd9ee6077a648cc1789b19943078668c653d9694c0c484aaaa3e126d8a153c6e91c689217e97fdcb7997cda884612bdc08273526ce25218be87d4e2e255eb3c4ca3b4dbf1cc024980b9f2f4ce785cdf6de891ab6a1536a4c01c9f554ac2e2f6bbda9c04bcb15e330b4f3a9880d8ee73ae2833c99fa3a9f4bb9df331333ee171fe0e209169b8e7f44cde52823dfc44175ca775869d9489573b4d8d3f7e5660992d72f196f0af80b4689a24c6c3ed0924237be67d87425d4e2cc12837bd5e49afda9fc2d3e4a491e1d8a1576f92fd39fbe4c7f0e974753c1b67c03cd18de9cf8837e6c13117e4f7530696f3fc68277ba7e7d7bb1de59f68310c858ed7fbb2e488608bba1887aeb7bee2f3d0df6d1404c5ed7e596d18d0c039e8e8f29d8e6b73461c43266f0ddd071d3c7cc734d9a7d82a334cbd63e1d5333b7a3a01a532affbfb3c7e866e53bae6f700cbf9cca28380867bd6e9b595b0f18b38bdd7e3751002a3bc71eb6bd669b616ad15d7fcad618bbce305e33268ea41920abf84bb2df6597245c628a324f239cd4e5f6a2c11b7510abfcb46bb321512bc47d2274b0af257d1d0ff94a40b3f6e19b42de56af4ced797bfdbd3bb318527f44799a86db120a3edfb9413453bd90ce62d9815cc9fdafaf7f5d352910489c496834d03bdfa0ed072006b985577815aadf45bf2310c39e585ce7e3ee98763e958f6651c32a82ab06e386c8c91a569cfe5ab3d51bdcedf7cf4fc41b0aee73b22e7787d65b3513f5bc1c27c48a89fbf688d93debe8a88593af6c3dc746084a00bc3a69005c7e33794f1edabecd5800fe1bbe632de8e0684beaa3573e3788b0629866c21b45892a9f48fd979239aa3aab64191bafa697f14a7dea382d675bc7ae053cf77eeb80555d223397cb71721ac1dfc609a9c6a040fad1fe6e418282c3dc5df90c7638e2b227c8fc75ee0e37be1ca1b4a6139c42ff570e83b86d3193554d72aaf590d16487a417c58092444da29e1b8759029632be12a2de7e35a833c7057c1dd5035d5f2e06949a82bb49dff7b1eaa345bd10c1197fb4abfc7db537d08f6117f802a293a10bb5c60579eb5623760cb882f5fe1e222996466d01cde6fdc290cc04eb4e7d684027b6a5598ce8e9884ee0c40ba99f4925e6110c23e0df299132ebf09e325161920eb342a70a726ab180537104696442d36ac571a35e1868829c604955d078ae57f7e4950cbad5609be76454a25be451b8340fcfa32cd6f5c43872e08361b547aa8b2966c72fca91c6c7fecc877168af47a3fa6e474b8dff5e820d7d3eb64ae6b58e1876f11178151c514d63045aaa43be161c20f5c29408e1407740071d70efbafe1d926304758eaf6160559f3afc130113b369877494dd48da40c42e84fafeea978f42987a628e56f9144b9d8b364466b0af4f80375596ad33a1490d31f6f2c2d33c3b39ef18e130aa65cb748f2dda332f6d2752a77a0b5145c6e60fc70a78cbf3e78c902d72f033008facb0f811f6dd3a36f7db05ce9b112b21923afae8dc2c3f56072ed8ef8279359e4721d3d67b800f22739d33fa2041bcbd1b13f6a3c113ed43a27c4df07ae83e1ce8db0cbb7043a2693ce8dc264aed7e0d04538ed197dfac7a63fceb46c9af5b5ee560e442a62105d10245420d0e26af331ef8207a1594c0d0568ebcadc05a8cc0fb077c9a99bca3fdfb198d8373571f06b6324ce76e0bdb6d1cbf5952d34be24f025501c043512cae725e232b38bd9760e6f997e65e3e9e57c7fbe199871166387d811e6f07061c20ae8f1b045ed84c90214da77cf7fc9540037a73d45a29df6cf809b4a57e5fe974b72ad9989c7057f581316be56fd60975bf86c75ba4973cc2c1e36c93a497438e6f06df23e371d1e5911501886df8bda32f56953fd1f780cefd71753252d1fbb6065666609ffcfe10dd0264706f69194890f2f5b4945f8a10ff23b80ac3a6f3fbd4d880c84b4b3462748606e1b4d42c9e6b1f5cad9ab8f611553e4ef0cf0458e23743f6cec5e42792a82f2f1578a8befab4ff72d5e044958b4842e5ffbf3cccc5e5f51796dcab6c90a4789aac121af47a1295f1d6e7ab94d44f6584bc751f4b4c1b29dfe644c5dc584c277f21789930d6c0d45d369c70497c030cac6af371e3b72ff87d9249cc4809a242b4bd6aac9acfbe36e782f3235a84b5d8080e21400d67146c8510a606bf13b38ae77afb197cded0ea70e2ca3c8132cbd265d1bb71fde402be240341050a0774ae2a79be3576953b8110e7344fa28b06e859f76dc06ca0f51fa398a56</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="随笔" scheme="https://sunxin18.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>seq2seq</title>
    <link href="https://sunxin18.github.io/2020/05/20/seq2/"/>
    <id>https://sunxin18.github.io/2020/05/20/seq2/</id>
    <published>2020-05-20T07:36:23.000Z</published>
    <updated>2020-05-31T10:24:14.285Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文将介绍seq2seq模型以及机器翻译的内容,需要明白RNN模型<br>RNN介绍的文章看这里：<a href="https://blog.csdn.net/zhaojc1995/article/details/80572098" target="_blank" rel="noopener">https://blog.csdn.net/zhaojc1995/article/details/80572098</a><br>为什么需要RNN?</p><ul><li>时序数据：语音、天气、股票、文本<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mi>t</mi></msub><mo>=</mo><mi>f</mi><mrow><mo fence="true">(</mo><msub><mi>w</mi><mrow><mi>h</mi><mi>h</mi></mrow></msub><mo>⋅</mo><msub><mi>h</mi><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>w</mi><mrow><mi>x</mi><mi>h</mi></mrow></msub><mo>⋅</mo><msub><mi>x</mi><mi>t</mi></msub><mo>+</mo><msub><mi>b</mi><mn>1</mn></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">h_{t}=f\left(w_{h h} \cdot h_{h-1}+w_{x h} \cdot x_{t}+b_{1}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>y</mi><mo>^</mo></mover><mi>t</mi></msub><mo>=</mo><mi>g</mi><mrow><mo fence="true">(</mo><msub><mi>w</mi><mrow><mi>h</mi><mi>y</mi></mrow></msub><mo>⋅</mo><msub><mi>h</mi><mi>t</mi></msub><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\hat{y}_{t}=g\left(w_{h y} \cdot h_{t}+b_{2}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></li><li>R’n’n</li></ul><h1 id="seq2seq"><a class="markdownIt-Anchor" href="#seq2seq"></a> seq2seq</h1><p>seq2seq(sequence to sequence)故名思意就是一种能够根据给定的序列，通过特定的方法生成另一个序列的方法，属于encoder-decoder结构的一种，这里看看常见的encoder-decoder结构，基本思想就是利用两个RNN，一个RNN作为encoder，另一个RNN作为decoder。encoder负责将输入序列压缩成指定长度的向量，这个向量就可以看成是这个序列的语义，这个过程称为编码，如下图，获取语义向量最简单的方式就是直接将最后一个输入的隐状态作为语义向量C。也可以对最后一个隐含状态做一个变换得到语义向量，还可以将输入序列的所有隐含状态做一个变换得到语义变量。<br>而decoder则负责根据语义向量生成指定的序列，这个过程也称为解码，如下图，最简单的方式是将encoder得到的语义变量作为初始状态输入到decoder的RNN中，得到输出序列。可以看到上一时刻的输出会作为当前时刻的输入，而且其中语义向量C只作为初始状态参与运算，后面的运算都与语义向量C无关。<br>seq2seq应用在机器翻译、对话机器人等领域，后续会补充一些项目实战，下面先介绍一下基础思路<br><a href="/2020/05/20/seq2/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/seq2/1.png" alt title></a><br><a href="/2020/05/20/seq2/2.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/seq2/2.png" alt title></a></p><h1 id="seq2seq训练"><a class="markdownIt-Anchor" href="#seq2seq训练"></a> seq2seq训练</h1><p>训练数据为&lt;中文，英文&gt;，然后我们将每个minibatch中语句的长度补成相同（与最大长度相同），不同的minibatch不要求相同长度，这样方便进行向量化矩阵化(matrix)操作，</p><h1 id="infereencedecoding"><a class="markdownIt-Anchor" href="#infereencedecoding"></a> infereence/Decoding</h1><p>如果我们已经训练好了模型参数，怎么生成语句序列呢呢？<br><a href="/2020/05/20/seq2/3.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/seq2/3.png" alt title></a><br>通过模型softmax，我们可以得到每个单词的概率分布，然后每次选取概率最大的作为生成词(greedy)，但如果我们只考虑每个单词(unigram)，即使生成的语句单词相同，但是如果顺序不同就会不通顺，即没有好的语法结构，所以可以用bgram。<br>如何改进只能考虑局部最优解的局限性呢？下面有两个改进想法，exhaustic search,beam search</p><h2 id="exhaustic-search"><a class="markdownIt-Anchor" href="#exhaustic-search"></a> exhaustic search</h2><p>就是每次都考虑所有单词的情况，而不是只选择概率最高的单词，这样肯定可以找到全局最优解，但是这样就会复杂度很高，为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mrow><mo fence="true">∣</mo><mi>v</mi><mo fence="true">∣</mo></mrow><mi>T</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\left | v\right |^{T})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.231231em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><h2 id="beam-search"><a class="markdownIt-Anchor" href="#beam-search"></a> beam search</h2><p>exhaustic search复杂度太高，我们考虑使用beam search，这种方法是既考虑了贪心算法的改进也对复杂度降低，如果我们设三种方法的最优解是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">T_{o}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>e</mi></msub></mrow><annotation encoding="application/x-tex">T_{e}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">T_{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>o</mi></msub><mo>⊂</mo><msub><mi>T</mi><mi>e</mi></msub><mo>⊂</mo><msub><mi>T</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">T_{o} \subset T_{e} \subset T_{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br>beam search的想法是每次只考虑最好的k个单词，接下来是对第一次最好的k个单词继续考虑第二个生成单词也是取概率最高的前k个,但如果这样继续下去又是指数级增长了，所以是取对目前的序列（目前也就是长度为2）的概率和(其实是概率的乘积，但因为取了log)最高的k个序列，最后直到序列预测到end时停止，这样考虑也是有局限的，因为可能有的序列到很短就停止了，这样他的值就很大，最优解会优先选他，所以这块我们对每个序列除以长度。<br>每一步最多考虑<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">k^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>个可能性，这个算法的复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>k</mi><mn>2</mn></msup><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(k^{2}T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span><br><a href="/2020/05/20/seq2/4.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/seq2/4.png" alt title></a></p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><p>这里附上pytorch官方的实现：<a href="https://pytorch.org/tutorials/intermediate/seq2seq_translation_tutorial.html" target="_blank" rel="noopener">https://pytorch.org/tutorials/intermediate/seq2seq_translation_tutorial.html</a></p><h1 id="transformer"><a class="markdownIt-Anchor" href="#transformer"></a> transformer</h1><p>我们知道同一个单词可能在不同的语境中可能有不同的意思也就是需要不同的向量表达，这个表达依赖于上下文的意思，其他单词也影响着这个单词的意思，</p><h2 id="为什么需要self-attention"><a class="markdownIt-Anchor" href="#为什么需要self-attention"></a> 为什么需要self-attention？</h2><p>lstm的不足：</p><ul><li>long-term dependency</li><li>只能串行</li></ul><p>transformer：<br>两两个都能考虑到</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="自然语言处理" scheme="https://sunxin18.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="seq2seq" scheme="https://sunxin18.github.io/tags/seq2seq/"/>
    
  </entry>
  
  <entry>
    <title>attention(注意力机制解析)</title>
    <link href="https://sunxin18.github.io/2020/05/20/attention/"/>
    <id>https://sunxin18.github.io/2020/05/20/attention/</id>
    <published>2020-05-20T00:50:58.000Z</published>
    <updated>2020-05-31T10:24:15.685Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文我们将讲解注意力机制在视觉和自然语言以及图挖掘领域的使用。<br>PyTorch：<a href="https://github.com/sgrvinod/a-PyTorch-Tutorial-to-Image-Captioning" target="_blank" rel="noopener">https://github.com/sgrvinod/a-PyTorch-Tutorial-to-Image-Captioning</a></p><h2 id="mutimodal-learning"><a class="markdownIt-Anchor" href="#mutimodal-learning"></a> mutimodal learning</h2><p>即将多个模型连接起来，每个模型完成相应的任务，一起完成比如看图说话、提取摘要等任务。<br><a href="/2020/05/20/attention/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/attention/1.png" alt title></a></p><h2 id="attention注意力机制"><a class="markdownIt-Anchor" href="#attention注意力机制"></a> attention(注意力机制)</h2><p>将注意力放到重要的地方，比较符合人类的思考，可以应用在文本、图像、自注意力(self-attention)</p><h3 id="看图说话"><a class="markdownIt-Anchor" href="#看图说话"></a> 看图说话</h3><p>先把图片提取出一个向量作为桥梁，我们取模型中倒数第二个向量v，wih是一个转移矩阵,输入到RNN中来生成语句序列<br>但这模型有些问题，</p><ol><li>识别不出来某些物体</li><li>我们把图片等价于一个向量，通过这个向量来生成，其实有时候我们只需要关注图片中的一直猫，不需要理解整张图片<br><a href="/2020/05/20/attention/2.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/attention/2.png" alt title></a></li></ol><h2 id="图像识别的注意力机制"><a class="markdownIt-Anchor" href="#图像识别的注意力机制"></a> 图像识别的注意力机制</h2><p>这里feature矩阵每个格子都是一个d维的向量，a1也是一个3×3的矩阵，每个格代表这个区域的权重，当我们生成第一个单词我们要将注意力放在概率最高的区域，然后将这个两个矩阵的信息进行汇集到向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Z</mi></mrow><annotation encoding="application/x-tex">Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span></span>，较于之前的seq2seq模型，我们这里就多了一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Z</mi></mrow><annotation encoding="application/x-tex">Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span></span><br><a href="/2020/05/20/attention/3.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/attention/3.png" alt title></a><br>我们将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">z1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">1</span></span></span></span>输入到rnn模型，这里的first word就是start ，通过h1输出第一个单词和第二个单词的注意力，然后再生成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">z2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">2</span></span></span></span>,这里的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">y2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">2</span></span></span></span>就是的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">d1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord">1</span></span></span></span><br><a href="/2020/05/20/attention/4.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/attention/4.png" alt title></a></p><p><a href="https://blog.csdn.net/shenxiaolu1984/article/details/51493673#fn:1" target="_blank" rel="noopener">https://blog.csdn.net/shenxiaolu1984/article/details/51493673#fn:1</a></p><h1 id="attention-in-seq2seq"><a class="markdownIt-Anchor" href="#attention-in-seq2seq"></a> attention in seq2seq</h1><h2 id="seq2seq的不足"><a class="markdownIt-Anchor" href="#seq2seq的不足"></a> seq2seq的不足：</h2><ol><li><strong>梯度问题</strong><br>首先我们的语义编码c，我们的目的是希望这个向量能包括所有输入的单词信息，但是因为LSTM梯度消失的问题，c可能只能捕获离他较近的几个单词的信息，前面的单词可能就考虑不到了(怎么改进？给前面的单词分配一个权重——–attention)</li><li><strong>应用角度</strong><br>现在的模型，我们生成下一个单词是依赖于上一个单词(pre)以及语义编码c,即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>←</mo><mo stretchy="false">(</mo><mi>p</mi><mi>r</mi><mi>e</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">v \leftarrow (pre,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span></span></span></span>，然而往往我们在翻译的时候只会关注句子的一部分，并且这种模式太过于依赖语义编码c，如果c的效果不理想，那么最后的decoder也会不理想，这也是bottleneck problem。还有一个原因，c向量的维度已经固定，对不同长度的输入句子，都用一个固定维度的向量表达难免不足</li></ol><h2 id="seq2seq的attention"><a class="markdownIt-Anchor" href="#seq2seq的attention"></a> seq2seq的attention</h2><p>下面这幅图讲解了大致流程，首先看encoder部分这里的隐含向量g是什么，举个例子，按照图的描述，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>就是transformation,f是激活函数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>g</mi><mn>2</mn></msub><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>W</mi><mrow><mi>x</mi><mi>h</mi></mrow></msub><mo>⋅</mo><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo stretchy="false">(</mo><mi>w</mi><mi>e</mi><mi>a</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>W</mi><mrow><mi>h</mi><mi>h</mi></mrow></msub><mo>⋅</mo><msub><mi>g</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g_{2}=f(W_{xh} \cdot embeding(weather)+W_{hh}\cdot g_{1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。<br>我们要使用注意力，就要给每个词一个attention score，最简单的就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span>的内积，当然也可以设置别的函数，比如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>g</mi><mi>T</mi></msup><mo>⋅</mo><mi>M</mi><mo>⋅</mo><mi>h</mi></mrow><annotation encoding="application/x-tex">g^{T} \cdot M \cdot  h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.035771em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span>,这里的M就是要学习的一个参数矩阵。<br>我们以内积的方法为例，通过计算每个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>g</mi><mi>T</mi></msup><mo>⋅</mo><mi>h</mi></mrow><annotation encoding="application/x-tex">g^{T} \cdot h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.035771em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span>我们得到了每个单词的一个权重，然后通过归一化(可以是简单的通分，也可以是softmax)。<br>现在我们如何生成单词呢？首先先通过attention scroe,来生成新的context vector <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">c_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">c_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>来生成翻译单词(之前我们用的是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span>),<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">c_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>按图中的例子就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>=</mo><mn>0.6</mn><mo>⋅</mo><msub><mi>g</mi><mn>1</mn></msub><mo>+</mo><mn>0.2</mn><mo>⋅</mo><msub><mi>g</mi><mn>2</mn></msub><mo>+</mo><mn>0.1</mn><mo>⋅</mo><msub><mi>g</mi><mn>3</mn></msub><mo>+</mo><mn>0.1</mn><mo>⋅</mo><msub><mi>g</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">c_{1}=0.6\cdot g_{1}+0.2\cdot g_{2}+0.1\cdot g_{3}+0.1\cdot g_{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，然后我们将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">c_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">h_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>拼接起来，来得到输出的单词<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">y_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub><mo>=</mo><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>W</mi><mrow><mi>h</mi><mi>y</mi></mrow></msub><mo>⋅</mo><mo stretchy="false">(</mo><msub><mi>c</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi><msub><mi>h</mi><mn>1</mn></msub><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y_{1}=softmax(W_{hy} \cdot (c_{1}|h_{1}+b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span>(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">y_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>就是v维度的,选取概率最大的单词作为预测词),之后类似，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">y_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>作为第二个预测单词的输入<br><a href="/2020/05/20/attention/5.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/attention/5.png" alt title></a></p><h2 id="attention的优点"><a class="markdownIt-Anchor" href="#attention的优点"></a> attention的优点：</h2><ol><li>解决了梯度问题</li><li><strong>可解释性</strong>(深度学习缺乏理论支持，大多参数的选择都是随机调，所以可解释学习也是当前的一个方向）.<br>没有attention，我们无法可视化，无法看到模型的不足点去修改，有了attention我们可以针对性的解决，比如拿一句话<strong>今天天气很好</strong>，我们的模型把今天翻译成了yesterday，那么我们可以看一下今天的attention score，如果很高说明方向是对的，可能是样本数据的问题，如果权重小也就是其他词的权重大了，那么这个模型就是有问题了</li></ol><h2 id="attention的不足"><a class="markdownIt-Anchor" href="#attention的不足"></a> attention的不足：</h2><p>attention in seq2seq的不足：<br>我们这种思路是给每个单词一个权重，我们更希望每个单词是独立的，然而RNN的特性，当前单词又会汇集之前的单词信息，这也是一个矛盾点，</p><ul><li>想法一：g2-g1?来去除冗余信息？当然这是不对的，因为向量的表达相当于是空间中的一个位置，向量的差值没有什么含义，有方向的，方向是不能减的。</li></ul><h1 id="self-attention"><a class="markdownIt-Anchor" href="#self-attention"></a> self-attention</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="自然语言处理" scheme="https://sunxin18.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="attention" scheme="https://sunxin18.github.io/tags/attention/"/>
    
  </entry>
  
  <entry>
    <title>算法优化</title>
    <link href="https://sunxin18.github.io/2020/05/15/optimize/"/>
    <id>https://sunxin18.github.io/2020/05/15/optimize/</id>
    <published>2020-05-15T05:44:11.000Z</published>
    <updated>2020-05-31T10:24:17.169Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本系列将探讨算法的优化。</p><h1 id="时间复杂度对算法的选择"><a class="markdownIt-Anchor" href="#时间复杂度对算法的选择"></a> 时间复杂度对算法的选择</h1><p><a href="/2020/05/15/optimize/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/15/optimize/1.png" alt title></a></p><h1 id="时间优化"><a class="markdownIt-Anchor" href="#时间优化"></a> 时间优化</h1><h2 id="思维的改进"><a class="markdownIt-Anchor" href="#思维的改进"></a> 思维的改进</h2><p>LCP08.剧情触发时间<br>最开始的想法同时考虑三个属性，每到新的一天就遍历requirements数组，看能否有剧情出发，果不其然超时了，最后两个样例没通过<br>之后进行改进。<br>首先如果只考虑一种属性，显然我们只需要计算每一天的属性情况，最后对于所有的requirements 都在属性列表中进行二分查找（现在只有一种属性了)，就能知道他是在哪一天完成的了。<br>但这道题实际上，每一种属性的满足是互相独立的。<br>简单来说，对于一个剧情要求 (C, R, H) 来说，假设 C 要求是在第 x 天满足的，R要求是在第 y 天满足的，H 要求是在第 z 天满足的。那么该剧情的满足时间为：<br>t=max(x,y,z)</p><p>原始代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getTriggerTime(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; increase, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; requirements) &#123;</span><br><span class="line">        <span class="keyword">int</span> res[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> day=increase.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;end(requirements.size(),<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;day;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                res[j]+=increase[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;requirements.size();m++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end[m]!=<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> count1=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;<span class="number">3</span>;n++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(res[n]&gt;=requirements[m][n])</span><br><span class="line">                        count++;</span><br><span class="line">                    <span class="keyword">if</span>(requirements[m][n]==<span class="number">0</span>)</span><br><span class="line">                        count1++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(count1==<span class="number">3</span>)&#123;</span><br><span class="line">                    end[m]=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(count==<span class="number">3</span>)</span><br><span class="line">                    end[m]=i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>改进代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getTriggerTime(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; increase, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; requirements) &#123;</span><br><span class="line"><span class="comment">//将三个属性分开，并初始化为0</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C(increase.size() + <span class="number">1</span>, <span class="number">0</span>);<span class="comment">//初始化</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; R(increase.size() + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; H(increase.size() + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; increase.size(); ++i)<span class="comment">//算和</span></span><br><span class="line">&#123;</span><br><span class="line">C[i + <span class="number">1</span>] = C[i] + increase[i][<span class="number">0</span>];</span><br><span class="line">R[i + <span class="number">1</span>] = R[i] + increase[i][<span class="number">1</span>];</span><br><span class="line">H[i + <span class="number">1</span>] = H[i] + increase[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;<span class="comment">//返回值</span></span><br><span class="line"><span class="keyword">int</span> maxlen = C.size();<span class="comment">//若lower_bound中没找到则返回last，此时求的差是数组长度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; requirements.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//lower_bound 返回大于等于查找元素的位置</span></span><br><span class="line"><span class="keyword">int</span> lbc = lower_bound(C.begin(), C.end(), requirements[i][<span class="number">0</span>]) - C.begin();</span><br><span class="line"><span class="keyword">int</span> lbr = lower_bound(R.begin(), R.end(), requirements[i][<span class="number">1</span>]) - R.begin();</span><br><span class="line"><span class="keyword">int</span> lbh = lower_bound(H.begin(), H.end(), requirements[i][<span class="number">2</span>]) - H.begin();</span><br><span class="line"><span class="keyword">if</span> (lbc == maxlen || lbr == maxlen || lbh == maxlen)<span class="comment">//没触发</span></span><br><span class="line">&#123;</span><br><span class="line">ret.emplace_back(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ret.emplace_back(max(max(lbc, lbr), lbh));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h1 id="代码简洁优化"><a class="markdownIt-Anchor" href="#代码简洁优化"></a> 代码简洁优化</h1><ol start="1455"><li>检查单词是否为句中其他单词的前缀<br>使用字符串流</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">```c++</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isPrefixOfWord</span><span class="params">(<span class="built_in">string</span> sentence, <span class="built_in">string</span> searchWord)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ssin</span><span class="params">(sentence)</span></span>;</span><br><span class="line">        <span class="built_in">string</span> word;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;ssin&gt;&gt;word;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(word.substr(<span class="number">0</span>,searchWord.size())==searchWord)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>判断是否包括元音字母？<br>最原始思路</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">de</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'a'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'e'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'i'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'o'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'u'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">de(c)</span><br></pre></td></tr></table></figure></div><p>哈希表:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt;S(&#123;<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'i'</span>,<span class="string">'o'</span>,<span class="string">'u'</span>&#125;);</span><br><span class="line">S.count(c);</span><br><span class="line"><span class="comment">//0就是不包含，1就是包含</span></span><br></pre></td></tr></table></figure></div><p>参考资料：<br><a href="https://www.acwing.com/blog/content/32/" target="_blank" rel="noopener">https://www.acwing.com/blog/content/32/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法编程" scheme="https://sunxin18.github.io/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="优化" scheme="https://sunxin18.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>leetcode多函数编程</title>
    <link href="https://sunxin18.github.io/2020/05/15/function/"/>
    <id>https://sunxin18.github.io/2020/05/15/function/</id>
    <published>2020-05-15T02:07:30.000Z</published>
    <updated>2020-05-20T14:09:25.457Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol start="1396"><li>设计地铁系统<br>这道题主要思考点在于容器设计，in容器来记录编号id的人的（上车站点和上车时间）–pair，然后不需要额外用out来记录下车，直接在checkout函数里计算一下id的人上下车时间差做好记录，最后直接求mean就可以啦</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UndergroundSystem</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">using</span> pii = pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, pii&gt; in;</span><br><span class="line">    <span class="built_in">map</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt;, <span class="keyword">int</span>&gt; a, b;</span><br><span class="line">    </span><br><span class="line">    UndergroundSystem() &#123;</span><br><span class="line">        in.clear();</span><br><span class="line">        a.clear();</span><br><span class="line">        b.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">checkIn</span><span class="params">(<span class="keyword">int</span> id, <span class="built_in">string</span> stationName, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        in[id] = &#123;stationName, t&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">checkOut</span><span class="params">(<span class="keyword">int</span> id, <span class="built_in">string</span> stationName, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> [ss, tt] = in[id];</span><br><span class="line">        <span class="keyword">int</span> time = t-tt;</span><br><span class="line">        a[&#123;ss,stationName&#125;] ++;</span><br><span class="line">        b[&#123;ss,stationName&#125;] += time;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getAverageTime</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)b[&#123;s,t&#125;]/a[&#123;s,t&#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法编程" scheme="https://sunxin18.github.io/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="多函数编程" scheme="https://sunxin18.github.io/tags/%E5%A4%9A%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Binary Search</title>
    <link href="https://sunxin18.github.io/2020/05/09/Binary-Search/"/>
    <id>https://sunxin18.github.io/2020/05/09/Binary-Search/</id>
    <published>2020-05-09T12:10:33.000Z</published>
    <updated>2020-05-20T14:53:24.379Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>二分搜索核心思想：把<em>待搜索区间</em>分为<em>有目标元素的区间</em>和<em>不包含目标元素的区间</em>，排除掉<em>不包含目标元素的区间</em>的区间，剩下就是<em>有目标元素的区间</em>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>华为云口罩配送大赛经验分享</title>
    <link href="https://sunxin18.github.io/2020/05/08/huawei/"/>
    <id>https://sunxin18.github.io/2020/05/08/huawei/</id>
    <published>2020-05-08T01:06:27.000Z</published>
    <updated>2020-05-08T08:13:41.249Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>比赛链接：<a href="https://competition.huaweicloud.com/information/1000037176/introduction" target="_blank" rel="noopener">https://competition.huaweicloud.com/information/1000037176/introduction</a></p><h3 id="赛题分析"><a class="markdownIt-Anchor" href="#赛题分析"></a> 赛题分析：</h3><ol><li>地图大小为12×12，需求点固定为5个，配送目标是将所有需求点的需求进行满足，配送过程中会随机生成捐赠小区</li><li>纯命令行交互，使用标准I/O作为命令（S/R/G）和移动方向(E/W/S/N)的传递途径</li><li>在1000张地图上测试</li></ol><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><ol><li>我没有做太多的思考，思路也很容易理解，首先先到的就是greedy策略，每次都选择当前最好的选择，当然这只能考虑到局部最优，但最后结果还不错，能排进前二十。</li><li>每次配送的时候都优先选择离当前最近的需求点配送，取货的时候给每个捐赠小区一个ranking，就按照捐赠数量/距离来做，试了一下距离的平方结果不如绝对值。</li><li>配送有几种情况需要考虑：<ul><li>车上口罩为0，那么肯定要去取货，那么就按ranking来选择</li><li>车上口罩为100，那么肯定要去送货，就选择最近的，因为最远的周边可能后续会生成捐赠小区</li><li>接下的两种情况最难考虑，就是送完一个小区或者刚取完一些车上还剩，那么是去接着送别的小区，还是取货呢？我的想法就是也写一个ranking比较，送货和取货的价值比较，但要考虑一些特殊情况，如果此时的货够最近的需求小区a那么就去送，如果此时的货加上离aranking最高的取货点足够那么就直接去取货点取货，当然这考虑非常不够，很需要改进,可以学习依一下别的选手的思路。</li></ul></li></ol><h3 id="代码分析"><a class="markdownIt-Anchor" href="#代码分析"></a> 代码分析</h3><p>下面对我的代码进行讲解，用python写的.<br>load:当前装载量<br>target：目标地<br>R(字典)：对应坐标的货量，需求点就是负值，捐赠和仓库就是正值，<em>坐标要用元组，不是列表</em></p><h4 id="主函数"><a class="markdownIt-Anchor" href="#主函数"></a> 主函数</h4><h5 id="需求小区仓库初始化"><a class="markdownIt-Anchor" href="#需求小区仓库初始化"></a> 需求小区仓库初始化</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    new_string=input()</span><br><span class="line">    s_list=new_string.split()</span><br><span class="line">    S=(int(s_list[<span class="number">1</span>]),int(s_list[<span class="number">2</span>]))</span><br><span class="line">    R=&#123;&#125;</span><br><span class="line">    R[(int(s_list[<span class="number">1</span>]),int(s_list[<span class="number">2</span>]))]=<span class="number">100</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">        new_string=input()</span><br><span class="line">        r_list=new_string.split()</span><br><span class="line">        R[(int(r_list[<span class="number">1</span>]),int(r_list[<span class="number">2</span>]))]=int(r_list[<span class="number">3</span>])</span><br><span class="line">    p=list(S)</span><br><span class="line">    load=<span class="number">0</span>             <span class="comment">#初始化装载量为0</span></span><br><span class="line">    target=S</span><br></pre></td></tr></table></figure></div><h5 id="选择每次到达小区或者捐赠点就行下一步的选择"><a class="markdownIt-Anchor" href="#选择每次到达小区或者捐赠点就行下一步的选择"></a> 选择（每次到达小区或者捐赠点就行下一步的选择)</h5><p>这里我加入了一个配送时如果有顺路的捐赠小区，那就去取一下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        P=tuple(p)</span><br><span class="line">        <span class="keyword">if</span> P == S:</span><br><span class="line">            load = <span class="number">100</span></span><br><span class="line">            target = choose_na_target(p)</span><br><span class="line">        <span class="keyword">elif</span> P <span class="keyword">in</span> R.keys():</span><br><span class="line">            sum=load+R[P]</span><br><span class="line">            <span class="keyword">if</span> R[P] &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> sum&lt;<span class="number">0</span>:</span><br><span class="line">                    load=<span class="number">0</span></span><br><span class="line">                    R[P]=sum</span><br><span class="line">                    <span class="keyword">if</span> R[closest(p)] &gt;= -R[P]:</span><br><span class="line">                        target = closest(p)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        target= choose_target(p)        <span class="comment">#车空就去送取货</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">del</span> R[P]</span><br><span class="line">                    <span class="keyword">if</span> len(R)==<span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> min(R.values())&gt;<span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    load=sum</span><br><span class="line">                    target1 = choose_na_target(p)</span><br><span class="line">                    target2 = choose_target(p)</span><br><span class="line">                    target3 = choose_target(target1)</span><br><span class="line">                    <span class="keyword">if</span> load &gt;= -R[target1]: </span><br><span class="line">                        target = target1</span><br><span class="line">                    <span class="keyword">elif</span> load + R[target3] &gt;= -R[target1]:</span><br><span class="line">                        target = target3</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        target =  com_value(p ,target1,target2)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> sum &gt; <span class="number">100</span>:</span><br><span class="line">                    load=<span class="number">100</span></span><br><span class="line">                    R[P]=sum<span class="number">-100</span></span><br><span class="line">                    target = choose_na_target(p)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">del</span> R[P]</span><br><span class="line">                    load=sum</span><br><span class="line">                    target1 = choose_na_target(p)</span><br><span class="line">                    target2 = choose_target(p)</span><br><span class="line">                    <span class="keyword">if</span> load &gt;= -R[target1]: </span><br><span class="line">                        target = target1</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        target =  com_value(p ,target1,target2)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> R.keys():<span class="comment">#顺路就去取</span></span><br><span class="line">                <span class="keyword">if</span> R[k] &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span>(k[<span class="number">0</span>]&gt;=target[<span class="number">0</span>] <span class="keyword">and</span>  k[<span class="number">0</span>]&lt;=p[<span class="number">0</span>]) <span class="keyword">or</span> (k[<span class="number">0</span>]&lt;=target[<span class="number">0</span>] <span class="keyword">and</span>  k[<span class="number">0</span>]&gt;=p[<span class="number">0</span>]):</span><br><span class="line">                        <span class="keyword">if</span>(k[<span class="number">1</span>]&gt;=target[<span class="number">1</span>] <span class="keyword">and</span>  k[<span class="number">1</span>]&lt;=p[<span class="number">1</span>]) <span class="keyword">or</span> (k[<span class="number">1</span>]&lt;=target[<span class="number">1</span>] <span class="keyword">and</span>  k[<span class="number">1</span>]&gt;=p[<span class="number">1</span>]):</span><br><span class="line">                            target = k</span><br></pre></td></tr></table></figure></div><h5 id="读取命令行输入"><a class="markdownIt-Anchor" href="#读取命令行输入"></a> 读取命令行输入</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">new_string=input()</span><br><span class="line">        <span class="keyword">if</span> new_string==<span class="string">'G'</span>:          <span class="comment">#读取到行动的命令，向target移动</span></span><br><span class="line">            p,next_step=step(p,target)</span><br><span class="line">            print(next_step)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r_list=new_string.split()</span><br><span class="line">            <span class="keyword">if</span> p[<span class="number">0</span>] == int(r_list[<span class="number">1</span>]) <span class="keyword">and</span> p[<span class="number">1</span>] == int(r_list[<span class="number">2</span>]):                   <span class="comment">#空投贴脸hhh</span></span><br><span class="line">                <span class="keyword">if</span> load + int(r_list[<span class="number">3</span>]) &lt;= <span class="number">100</span>:</span><br><span class="line">                    load = load + int(r_list[<span class="number">3</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    R[(int(r_list[<span class="number">1</span>]),int(r_list[<span class="number">2</span>]))]=int(r_list[<span class="number">3</span>])<span class="number">-100</span>+load</span><br><span class="line">                    load = <span class="number">100</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                R[(int(r_list[<span class="number">1</span>]),int(r_list[<span class="number">2</span>]))]=int(r_list[<span class="number">3</span>])           <span class="comment">#更新一下选择</span></span><br><span class="line">                <span class="keyword">if</span>  R[target] &gt; <span class="number">0</span>:     <span class="comment">#注意R里没有S</span></span><br><span class="line">                    target = choose_target(p)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cur_target = (int(r_list[<span class="number">1</span>]),int(r_list[<span class="number">2</span>]))</span><br><span class="line">                    target = com_value(p ,target,cur_target)</span><br></pre></td></tr></table></figure></div><h5 id="移动函数"><a class="markdownIt-Anchor" href="#移动函数"></a> 移动函数</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">step</span><span class="params">(pos,to)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> pos[<span class="number">0</span>]&lt;to[<span class="number">0</span>]:</span><br><span class="line">        pos[<span class="number">0</span>]=pos[<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> pos,<span class="string">'S'</span></span><br><span class="line">    <span class="keyword">elif</span> pos[<span class="number">0</span>]&gt;to[<span class="number">0</span>]:</span><br><span class="line">        pos[<span class="number">0</span>]=pos[<span class="number">0</span>]<span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> pos,<span class="string">'N'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> pos[<span class="number">1</span>]&lt;to[<span class="number">1</span>]:</span><br><span class="line">            pos[<span class="number">1</span>]=pos[<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> pos,<span class="string">'E'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pos[<span class="number">1</span>]=pos[<span class="number">1</span>]<span class="number">-1</span></span><br><span class="line">            <span class="keyword">return</span> pos,<span class="string">'W'</span></span><br></pre></td></tr></table></figure></div><h5 id="选择捐赠小区和需求小区"><a class="markdownIt-Anchor" href="#选择捐赠小区和需求小区"></a> 选择捐赠小区和需求小区</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_na_target</span><span class="params">(pos)</span>:</span></span><br><span class="line">    na_distance=<span class="number">0</span></span><br><span class="line">    <span class="keyword">global</span> load</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> R.keys():</span><br><span class="line">        <span class="keyword">if</span> R[k] &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> k[<span class="number">0</span>]==pos[<span class="number">0</span>] <span class="keyword">and</span> k[<span class="number">1</span>]==pos[<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            cur_dis2 = <span class="number">1</span>/ (abs(pos[<span class="number">0</span>]-k[<span class="number">0</span>])+abs(pos[<span class="number">1</span>]-k[<span class="number">1</span>])+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> cur_dis2 &gt; na_distance:</span><br><span class="line">                na_distance = cur_dis2</span><br><span class="line">                tar = k</span><br><span class="line">    <span class="keyword">return</span> tar</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_target</span><span class="params">(pos)</span>:</span></span><br><span class="line">    po_distance=<span class="number">0</span></span><br><span class="line">    <span class="keyword">global</span> load</span><br><span class="line">    distance = (<span class="number">100</span>-load)/ (abs(pos[<span class="number">0</span>]-S[<span class="number">0</span>])+abs(pos[<span class="number">1</span>]-S[<span class="number">1</span>])+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> R.keys():</span><br><span class="line">        <span class="keyword">if</span> R[k] &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> k[<span class="number">0</span>]==pos[<span class="number">0</span>] <span class="keyword">and</span> k[<span class="number">1</span>]==pos[<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> R[k] + load &gt; <span class="number">100</span>:</span><br><span class="line">                cur_dis1 = (<span class="number">100</span>-load)/ (abs(pos[<span class="number">0</span>]-k[<span class="number">0</span>])+abs(pos[<span class="number">1</span>]-k[<span class="number">1</span>])+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur_dis1 = R[k] / (abs(pos[<span class="number">0</span>] - k[<span class="number">0</span>]) + abs(pos[<span class="number">1</span>] - k[<span class="number">1</span>])+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> cur_dis1 &gt; po_distance:</span><br><span class="line">                po_distance = cur_dis1</span><br><span class="line">                tar =k   </span><br><span class="line">    <span class="keyword">if</span>  po_distance&gt; distance:</span><br><span class="line">        <span class="keyword">return</span> tar </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> S</span><br></pre></td></tr></table></figure></div><h5 id="捐赠小区和需求小区的比较ranking"><a class="markdownIt-Anchor" href="#捐赠小区和需求小区的比较ranking"></a> 捐赠小区和需求小区的比较ranking</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">com_value</span><span class="params">(pos,target1,target2)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    <span class="keyword">if</span> load &lt; -R[target1]:</span><br><span class="line">        cur_value1 = load</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        cur_value1 = -R[target1]</span><br><span class="line">    value1 = cur_value1 / (abs(pos[<span class="number">0</span>]-target1[<span class="number">0</span>])+abs(pos[<span class="number">1</span>]-target1[<span class="number">1</span>])+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> load +R[target2] &gt; <span class="number">100</span>:</span><br><span class="line">        cur_value2 = <span class="number">100</span> -load</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        cur_value2 = R[target2]</span><br><span class="line">    value2 = cur_value2 / (abs(pos[<span class="number">0</span>]-target2[<span class="number">0</span>])+abs(pos[<span class="number">1</span>]-target2[<span class="number">1</span>])+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> value1 &gt;value2:</span><br><span class="line">        <span class="keyword">return</span> target1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> target2</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="比赛" scheme="https://sunxin18.github.io/tags/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>换新电脑hexo博客的迁移</title>
    <link href="https://sunxin18.github.io/2020/04/29/blog-trsf/"/>
    <id>https://sunxin18.github.io/2020/04/29/blog-trsf/</id>
    <published>2020-04-29T12:14:36.000Z</published>
    <updated>2020-04-30T02:31:42.148Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-拷贝原始电脑blog文件夹到新电脑"><a class="markdownIt-Anchor" href="#一-拷贝原始电脑blog文件夹到新电脑"></a> 一、拷贝原始电脑blog文件夹到新电脑</h2><h2 id="二-安装git-nodejs"><a class="markdownIt-Anchor" href="#二-安装git-nodejs"></a> 二、安装git、node.js</h2><h2 id="三-安装-hexo"><a class="markdownIt-Anchor" href="#三-安装-hexo"></a> 三、安装 hexo</h2><p>在 cmd 下输入下面指令安装 hexo</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><figcaption><span>install hexo-cli -g```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 四、在blog文件夹下执行git bash，输入以下命令</span><br><span class="line">```npm install</span><br><span class="line">npm install hexo-deployer-git --save  // 文章部署到 git 的模块</span><br><span class="line">（下面为选择安装）</span><br><span class="line">npm install hexo-generator-feed --save  // 建立 RSS 订阅</span><br><span class="line">npm install hexo-generator-sitemap --save // 建立站点地图</span><br></pre></td></tr></table></figure></div><h2 id="五-创建ssh"><a class="markdownIt-Anchor" href="#五-创建ssh"></a> 五、创建ssh</h2><h3 id="1打开git-bash在用户主目录下运行ssh-keygen-t-rsa-c-你的邮箱-把其中的邮件地址换成自己的邮件地址然后一路回车"><a class="markdownIt-Anchor" href="#1打开git-bash在用户主目录下运行ssh-keygen-t-rsa-c-你的邮箱-把其中的邮件地址换成自己的邮件地址然后一路回车"></a> （1）打开git bash，在用户主目录下运行：ssh-keygen -t rsa -C “你的邮箱” 把其中的邮件地址换成自己的邮件地址，然后一路回车</h3><h3 id="2最后完成后会在用户主目录下生成ssh目录里面有id_rsa和id_rsapub两个文件这两个就是ssh-key密钥对id_rsa是私钥千万不能泄露出去id_rsapub是公钥可以放心地告诉任何人"><a class="markdownIt-Anchor" href="#2最后完成后会在用户主目录下生成ssh目录里面有id_rsa和id_rsapub两个文件这两个就是ssh-key密钥对id_rsa是私钥千万不能泄露出去id_rsapub是公钥可以放心地告诉任何人"></a> （2）最后完成后，会在用户主目录下生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH key密钥对，id_rsa是私钥，千万不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</h3><h3 id="3登陆github打开settings-ssh-and-gpg-keys然后点击new-ssh-key填上任意title在key文本框里粘贴公钥id_rsapub文件的内容千万不要粘贴成私钥了最后点击add-ssh-key你就应该看到已经添加的key"><a class="markdownIt-Anchor" href="#3登陆github打开settings-ssh-and-gpg-keys然后点击new-ssh-key填上任意title在key文本框里粘贴公钥id_rsapub文件的内容千万不要粘贴成私钥了最后点击add-ssh-key你就应该看到已经添加的key"></a> （3）登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add SSH Key」，你就应该看到已经添加的Key。</h3><p><strong>注意：不要在git版本库中运行ssh，然后又将它提交，这样就把密码泄露出去了。</strong></p><h2 id="六-部署可能出现的问题"><a class="markdownIt-Anchor" href="#六-部署可能出现的问题"></a> 六、部署可能出现的问题</h2><p>git上传包提交时出现：Please tell me who you are.<br><a href="/2020/04/29/blog-trsf/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/29/blog-trsf/1.png" alt title></a><br>解决方法：执行<br>git config --global user.email &quot;你的邮箱<br>git config --global <a href="http://user.name" target="_blank" rel="noopener">user.name</a> “gihub用户名”</p><p>之后就可以正常使用啦</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="博客维护" scheme="https://sunxin18.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4/"/>
    
    
      <category term="博客" scheme="https://sunxin18.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunxin18.github.io/2020/04/29/knn/"/>
    <id>https://sunxin18.github.io/2020/04/29/knn/</id>
    <published>2020-04-29T11:50:27.365Z</published>
    <updated>2020-05-18T03:36:33.117Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>title: knn应用（癌症判断）<br>date: 2020-02-03 15:54:50<br>categories: 机器学习<br>tags: [KNN,应用，参数]<br>cover: /img/me.jpg</p><h2 id="knn简介"><a class="markdownIt-Anchor" href="#knn简介"></a> KNN简介</h2><p>KNN算法的思想总结一下：就是在训练集中数据和标签已知的情况下，输入测试数据，将测试数据的特征与训练集中对应的特征进行相互比较，找到训练集中与之最为相似的前K个数据，则该测试数据对应的类别就是K个数据中出现次数最多的那个分类，其算法的描述为：</p><p>1）计算测试数据与各个训练数据之间的距离；</p><p>2）按照距离的递增关系进行排序；</p><p>3）选取距离最小的K个点；</p><p>4）确定前K个点所在类别的出现频率；</p><p>5）返回前K个点中出现频率最高的类别作为测试数据的预测分类。</p><p><strong>距离矩阵和k都是超参数</strong></p><h3 id="参数与超参数"><a class="markdownIt-Anchor" href="#参数与超参数"></a> 参数与超参数</h3><ol><li><p>参数(parameters)/模型参数<br>　由模型通过学习得到的变量，比如权重和偏置</p></li><li><p>超参数(hyperparameters)/算法参数<br>根据经验进行设定，影响到权重和偏置的大小，比如迭代次数、隐藏层的层数、每层神经元的个数、学习速率等</p></li></ol><h2 id="实战"><a class="markdownIt-Anchor" href="#实战"></a> 实战</h2><p>属性信息：</p><ol><li>Sample code number: id number</li><li>Clump Thickness: 1 - 10</li><li>Uniformity of Cell Size: 1 - 10</li><li>Uniformity of Cell Shape: 1 - 10</li><li>Marginal Adhesion: 1 - 10</li><li>Single Epithelial Cell Size: 1 - 10</li><li>Bare Nuclei: 1 - 10</li><li>Bland Chromatin: 1 - 10</li><li>Normal Nucleoli: 1 - 10</li><li>Mitoses: 1 - 10</li><li>Class: (2 for benign, 4 for malignant)（2为良性，4为恶性）</li></ol><p>为数据添加label，在第一行加入id,clump_thickness,uniform_cell_size,<br>uniform_cell_shape,marginal_adhesion,<br>single_epi_cell_size,bare_nuclei,bland_chromation,<br>normal_nucleoli,mitoses,class</p><p>数据样式：<br>clumb_thickness  unif_cell_size  unif_cell_shape  marg_adhesion  single_epith_cell_size bare_nuclei  bland_chrom  norm_nucleoli  mitoses  class<br>0                5               1                1              1                       2           1            3              1        1      2<br>1                5               4                4              5                       7          10            3              2        1      2<br>2                3               1                1              1                       2           2            3              1        1      2<br>3                6               8                8              1                       3           4            3              7        1      2<br>4                4               1                1              3                       2           1            3              1        1      2</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing ,model_selection,neighbors</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'breast-cancer-wisconsin.txt'</span>)<span class="comment">#encoding='utf-8',header=None,sep = '\t'</span></span><br><span class="line">df.replace(<span class="string">'?'</span>,<span class="number">-99999</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment">#print([column for column in df])</span></span><br><span class="line">df.drop([<span class="string">'id'</span>], <span class="number">1</span>, inplace=<span class="keyword">True</span>)  <span class="comment">#df.drop returns a new dataframe with our chosen column(s) dropped.</span></span><br><span class="line"><span class="comment">#df=df.iloc[:,1:]#.iloc使用全是以0开头的行号和列号，不能直接用其它索引哦。而.loc使用的实际设置的索引和列名。 这就是.loc和.iloc的区别。在实际运用中，我还发现一点区别，.iloc只能选取数据表里实际有的行和列，而.loc可以选取没有的行和列，赋值后就可以添加新行或者列。</span></span><br><span class="line">X = np.array(df.drop([<span class="string">'class'</span>],<span class="number">1</span>))</span><br><span class="line">y = np.array(df[<span class="string">'class'</span>])</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print([column for column in df])</span></span><br><span class="line"><span class="comment">#clf = LinearRegression(n_jobs=-1)#SVM.svr() kernel='poly'</span></span><br><span class="line">clf = neighbors.KNeighborsClassifier()</span><br><span class="line">clf.fit(X_train,y_train)</span><br><span class="line"></span><br><span class="line">accuracy = clf.score(X_test,y_test)</span><br><span class="line">print(accuracy)</span><br><span class="line">print(df.head())</span><br><span class="line"></span><br><span class="line"><span class="comment">#example_measures = np.array([4,2,1,1,1,2,3,2,1])  #一个sample</span></span><br><span class="line"><span class="comment">#example_measures = example_measures.reshape(1, -1)  #Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample</span></span><br><span class="line">example_measures = np.array([[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]])<span class="comment">#测试用例</span></span><br><span class="line">example_measures = example_measures.reshape(len(example_measures), <span class="number">-1</span>)</span><br><span class="line">prediction = clf.predict(example_measures)</span><br><span class="line"></span><br><span class="line">print(prediction)</span><br></pre></td></tr></table></figure></div><p>accuracy:0.9714285714285714<br>预测结果：prediction[2 2]  两个都为良性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>并行矩阵求逆</title>
    <link href="https://sunxin18.github.io/2020/04/25/parallow/"/>
    <id>https://sunxin18.github.io/2020/04/25/parallow/</id>
    <published>2020-04-25T01:56:10.000Z</published>
    <updated>2020-05-03T12:12:36.464Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h2><h3 id="parallel"><a class="markdownIt-Anchor" href="#parallel"></a> parallel</h3><p>parallel表示其后语句将被多个线程并行执行，“#pragma omp parallel”后面的语句（或者，语句块）被称为parallel region。<br>多个线程的执行顺序是不能保证的。</p><h3 id="for"><a class="markdownIt-Anchor" href="#for"></a> for</h3><p>我们一般是对一个计算量庞大的任务进行划分，让多个线程分别执行计算任务的某一部分，从而达到缩短计算时间的目的。这里的关键是，每个线程执行的计算互不相同（操作的数据不同或者计算任务本身不同），多个线程协作完成所有计算。</p><p>OpenMP for指示将C++ for循环的多次迭代划分给多个线程（划分指，每个线程执行的迭代互不重复，所有线程的迭代并起来正好是C++ for循环的所有迭代），这里C++ for循环需要一些限制从而能在执行C++ for之前确定循环次数，例如C++ for中不应含有break等。</p><h3 id="测试下电脑是几核的几线程"><a class="markdownIt-Anchor" href="#测试下电脑是几核的几线程"></a> 测试下电脑是几核的(几线程)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;omp.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"parallel begin:\n"</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> omp parallel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; omp_get_thread_num();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n parallel end.\n"</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.get();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="/2020/04/25/parallow/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/25/parallow/1.png" alt title></a></p><p>参考文献：<a href="https://blog.csdn.net/laobai1015/article/details/79020128" target="_blank" rel="noopener">https://blog.csdn.net/laobai1015/article/details/79020128</a></p><h3 id="问题分析"><a class="markdownIt-Anchor" href="#问题分析"></a> 问题分析</h3><p>矩阵求逆大致有三个方法，待定系数法、伴随矩阵求逆矩阵，初等变换求逆矩阵。而待定系数法和伴随矩阵对维数大很难计算了，而初等变化法有着清晰的过程，比较容易用编程语言表达，并且遍历矩阵去操作归一化清零等过程可以很容易实现并行化，不同线程的操作是针对不同行和列也不会产生冲突导致错误。<br><a href="/2020/04/25/parallow/2.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/25/parallow/2.png" alt title></a></p><h3 id="实现方案"><a class="markdownIt-Anchor" href="#实现方案"></a> 实现方案：</h3><p>使用高斯消元法，用二维vector来存储矩阵，方便实现矩阵维度的变化以及遍历，将可并行化的循环加上#pragma omp parallel for实现并行化。</p><h3 id="代码思路"><a class="markdownIt-Anchor" href="#代码思路"></a> 代码思路</h3><p><a href="/2020/04/25/parallow/3.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/25/parallow/3.png" alt title></a></p><h3 id="运行加速比和正确性验证"><a class="markdownIt-Anchor" href="#运行加速比和正确性验证"></a> 运行加速比和正确性验证</h3><p><a href="/2020/04/25/parallow/4.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/25/parallow/4.png" alt title></a><br><a href="/2020/04/25/parallow/5.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/25/parallow/5.png" alt title></a></p><p>代码基于c++和openmp编写，需要代码邮件call我~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="并行计算" scheme="https://sunxin18.github.io/categories/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="openmp" scheme="https://sunxin18.github.io/tags/openmp/"/>
    
  </entry>
  
  <entry>
    <title>pachong</title>
    <link href="https://sunxin18.github.io/2020/04/21/pachong/"/>
    <id>https://sunxin18.github.io/2020/04/21/pachong/</id>
    <published>2020-04-21T02:35:50.000Z</published>
    <updated>2020-04-21T02:35:52.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pytorch</title>
    <link href="https://sunxin18.github.io/2020/04/16/pytorch/"/>
    <id>https://sunxin18.github.io/2020/04/16/pytorch/</id>
    <published>2020-04-16T02:54:43.000Z</published>
    <updated>2020-05-20T11:04:45.372Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>深度学习有许多应用，这些应用往往包括以某种形式获取数据（例如图像或文本），并以另一种形式生成数据（例如标签，数字或更多文本）。从这个角度来看，深度学习包括构建一个将数据从一种表示转换为另一种表示的系统。<br>从一种数据形式到另一种数据形式的转换通常是由深度神经网络分层次学习的，这意味着我们可以将层次之间转换得到的数据视为一系列中间表示（intermediate representation）。以图像识别为例，浅层的表示可以是特征（例如边缘检测）或纹理（例如毛发），较深层次的表征可以捕获更复杂的结构（例如耳朵、鼻子或眼睛）。</p><h3 id="张量tensor"><a class="markdownIt-Anchor" href="#张量tensor"></a> 张量（tensor）</h3><p>对于来自数学、物理学或工程学的人来说，张量一词是与空间、参考系以及它们之间的转换的概念是捆绑在一起的。对于其他人来说，张量是指将向量（vector）和矩阵（matrix）推广到任意维度，。与张量相同概念的另一个名称是多维数组（multidimensional array）。张量的维数与用来索引张量中某个标量值的索引数一致。<br><a href="/2020/04/16/pytorch/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/16/pytorch/1.png" alt title></a></p><h4 id="张量的优点"><a class="markdownIt-Anchor" href="#张量的优点"></a> 张量的优点</h4><p>Python列表或数字元组（tuple）是在内存中单独分配的Python对象的集合，如图2.3左侧所示。然而，PyTorch张量或NumPy数组（通常）是连续内存块上的视图（view），这些内存块存有未封装（unboxed）的C数值类型，在本例中，如图2.3右侧所示，就是32位的浮点数（4字节），而不是Python对象。因此，包含100万个浮点数的一维张量需要400万个连续字节存储空间，再加上存放元数据（尺寸、数据类型等）的少量开销。<br><a href="/2020/04/16/pytorch/2.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/16/pytorch/2.png" alt title></a><br>比如可以用zeros或ones来初始化张量，同时用元组指定大小</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">points = torch.zeros(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">points</span><br></pre></td></tr></table></figure></div><p>输出：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tensor([[<span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>]])</span><br></pre></td></tr></table></figure></div><p>函数名后面带下划线_ 的函数会修改Tensor本身，例如，x.add_(y)和x.t_()会改变 x，但x.add(y)和x.t()返回一个新的Tensor， 而x不变。<br>Tensor和numpy对象共享内存，所以他们之间的转换很快，而且几乎不会消耗什么资源。但这也意味着，如果其中一个变了，另外一个也会随之改变。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="深度学习" scheme="https://sunxin18.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="pytorch" scheme="https://sunxin18.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>trie</title>
    <link href="https://sunxin18.github.io/2020/03/28/trie/"/>
    <id>https://sunxin18.github.io/2020/03/28/trie/</id>
    <published>2020-03-28T05:11:50.000Z</published>
    <updated>2020-03-28T05:15:30.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumLengthEncoding</span><span class="params">(self, words)</span>:</span></span><br><span class="line">        res=set(words)</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,len(word)):</span><br><span class="line">                res.discard(word[k:])</span><br><span class="line">        <span class="keyword">return</span> sum(len(word) + <span class="number">1</span> <span class="keyword">for</span> word <span class="keyword">in</span> res)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kmeans</title>
    <link href="https://sunxin18.github.io/2020/03/25/kmeans/"/>
    <id>https://sunxin18.github.io/2020/03/25/kmeans/</id>
    <published>2020-03-25T14:39:27.000Z</published>
    <updated>2020-03-27T14:59:20.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1><p>k-means algorithm算法是一个聚类算法，把n的对象根据他们的属性分为k个分割，k &lt; n。假设对象属性来自于空间向量，并且目标是使各个群组内部的均方误差总和最小。通过迭代的方式将样本分到K个簇。</p><h1 id="基本方法"><a class="markdownIt-Anchor" href="#基本方法"></a> 基本方法</h1><ol><li>选取K个点做为初始聚集的簇心（也可选择非样本点）;</li><li>分别计算每个样本点到 K个簇核心的距离（这里的距离一般取欧氏距离或余弦距离），找到离该点最近的簇核心，将它归属到对应的簇；</li><li>所有点都归属到簇之后， M个点就分为了 K个簇。之后重新计算每个簇的重心（平均距离中心），将其定为新的“簇核心”；<br>反复迭代 2 - 3 步骤，直到达到某个中止条件</li></ol><h1 id="sklearn实现"><a class="markdownIt-Anchor" href="#sklearn实现"></a> sklearn实现</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"></span><br><span class="line"><span class="comment">#产生数据</span></span><br><span class="line">k=<span class="number">4</span></span><br><span class="line">X,Y = make_blobs(n_samples=<span class="number">100</span>, n_features=<span class="number">2</span>, centers=k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#构建模型</span></span><br><span class="line">km = KMeans(n_clusters=k, init=<span class="string">'k-means++'</span>, max_iter=<span class="number">300</span>)</span><br><span class="line">km.fit(X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取簇心</span></span><br><span class="line">centroids = km.cluster_centers_</span><br><span class="line"><span class="comment"># 获取归集后的样本所属簇对应值</span></span><br><span class="line">y_kmean = km.predict(X)</span><br><span class="line">print(y_kmean)</span><br><span class="line"><span class="comment"># 呈现未归集前的数据</span></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], s=<span class="number">50</span>)</span><br><span class="line">plt.yticks(())</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y_kmean, s=<span class="number">50</span>, cmap=<span class="string">'viridis'</span>)</span><br><span class="line">plt.scatter(centroids[:, <span class="number">0</span>], centroids[:, <span class="number">1</span>], c=<span class="string">'black'</span>, s=<span class="number">100</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><a href="/2020/03/25/kmeans/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/03/25/kmeans/1.png" alt title></a><br><a href="/2020/03/25/kmeans/2.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/03/25/kmeans/2.png" alt title></a></p><h1 id="手工实现"><a class="markdownIt-Anchor" href="#手工实现"></a> 手工实现</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> spatial</span><br><span class="line"></span><br><span class="line"><span class="comment">#产生数据</span></span><br><span class="line">k=<span class="number">4</span></span><br><span class="line">X,Y = make_blobs(n_samples=<span class="number">100</span>, n_features=<span class="number">2</span>, centers=k)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcuDistance</span><span class="params">(vec1, vec2)</span>:</span></span><br><span class="line">    <span class="comment"># 步骤1：定义欧式距离的公式</span></span><br><span class="line">    <span class="comment"># 计算两个向量之间的欧式距离：根号下[(x_1-x_2)^2+(y_1-y_2)^2+...+(x_n-y_n)^2]</span></span><br><span class="line">    <span class="comment"># ver1 - ver2：表示两个向量的对应元素相减</span></span><br><span class="line">    <span class="keyword">return</span> np.sqrt(np.sum(np.square(vec1 - vec2)))  <span class="comment">#注意这里的减号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">k_means</span><span class="params">(data,k,Y)</span>:</span></span><br><span class="line">    m, n = data.shape <span class="comment"># m：样本数量，n：每个样本的属性值个数</span></span><br><span class="line">    cores = data[np.random.choice(np.arange(m), k, replace=<span class="keyword">False</span>)] <span class="comment"># 从m个数据样本中不重复地随机选择k个样本作为质心</span></span><br><span class="line">    print(cores)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>: <span class="comment"># 迭代计算</span></span><br><span class="line">        <span class="comment">#d = np.square(np.repeat(data, k, axis=0).reshape(m, k, n) - cores)</span></span><br><span class="line">        <span class="comment">#distance = np.sqrt(np.sum(d, axis=2)) # ndarray(m, k)，每个样本距离k个质心的距离，共有m行</span></span><br><span class="line">        distance = spatial.distance.cdist(data, cores,metric=<span class="string">'euclidean'</span>)</span><br><span class="line">        index_min = np.argmin(distance, axis=<span class="number">1</span>) <span class="comment"># 每个样本距离最近的质心索引序号</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (index_min == Y).all(): <span class="comment"># 如果样本聚类没有改变</span></span><br><span class="line">            <span class="keyword">return</span> Y, cores <span class="comment"># 则返回聚类结果和质心数据</span></span><br><span class="line">        </span><br><span class="line">        Y[:] = index_min <span class="comment"># 重新分类</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k): <span class="comment"># 遍历质心集</span></span><br><span class="line">            items = Y==i <span class="comment"># 找出对应当前质心的子样本集 ，对应的items为[True,false......]</span></span><br><span class="line">            cores[i] = np.mean(data[items], axis=<span class="number">0</span>) <span class="comment"># 以子样本集的均值作为当前质心的位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">result,cores=k_means(X,k,Y)</span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], s=<span class="number">50</span>)</span><br><span class="line">plt.yticks(())</span><br><span class="line">plt.show()</span><br><span class="line">print(Y)</span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=Y, s=<span class="number">50</span>, cmap=<span class="string">'viridis'</span>)</span><br><span class="line">plt.scatter(cores[:, <span class="number">0</span>], cores[:, <span class="number">1</span>], c=<span class="string">'black'</span>, s=<span class="number">100</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><h1 id="k-means的改进"><a class="markdownIt-Anchor" href="#k-means的改进"></a> k-means的改进</h1><p>k-means改进的一个路线就是尽可能加快收敛速度，这个方向有几个思路：<br>1.质心初始化：选择初始质心之间有一些策略比如尽量远离，有助于反应数据的分布，加快收敛。<br>2.改进k-means的迭代过程，有几个方向，一个改进复杂度，比如数据的访问用KD树来索引，一个是改进目标函数（原始目标函数就是使同一类的离质心距离最小），有一个思路是时刻更新质心，比如移动一个样本到最近的类别，就立刻更新相应的两个类质心，这样改变了每轮都要对所有样本更新label的繁琐过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="机器学习" scheme="https://sunxin18.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="K-means" scheme="https://sunxin18.github.io/tags/K-means/"/>
    
  </entry>
  
  <entry>
    <title>es</title>
    <link href="https://sunxin18.github.io/2020/03/23/es/"/>
    <id>https://sunxin18.github.io/2020/03/23/es/</id>
    <published>2020-03-23T12:29:56.000Z</published>
    <updated>2020-03-26T14:15:54.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>开启外网访问的方法：对elasticsearch.yml文件修改下面参数<br>transport.host: localhost<br>network.host: 192.168.3.5</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>list</title>
    <link href="https://sunxin18.github.io/2020/03/20/list/"/>
    <id>https://sunxin18.github.io/2020/03/20/list/</id>
    <published>2020-03-20T11:57:33.000Z</published>
    <updated>2020-04-09T08:25:58.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol start="203"><li>移除链表元素<br>一道简单题卡了很久…太长时间不做链表果然忘记太多，下面总结一下几点错误</li><li>leetcode的链表都没有头节点，head指针直接指向第一个元素，所以如果想要删除第一个的元素的话需要自己建立一个头节点</li><li>开始代码写得是return head，如果第一个元素被删除了，那么head后面的指向就断掉了</li><li>最开始循环里是这么写的</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span>(p-&gt;next-&gt;val==val)&#123;</span><br><span class="line">    p-&gt;next=p-&gt;next-&gt;next;</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这样的话删除后就会跳过一个元素了。<br>下面代码，<br><strong>常规</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">         ListNode*q = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">         q-&gt;next = head;</span><br><span class="line">        ListNode*p = q;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;next-&gt;val==val)</span><br><span class="line">                p-&gt;next=p-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p><strong>递归</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        head-&gt;next = removeElements(head-&gt;next, val);</span><br><span class="line">        <span class="keyword">return</span> head-&gt;val == val ? head-&gt;next : head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法编程" scheme="https://sunxin18.github.io/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="链表" scheme="https://sunxin18.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>python编程(持续更新)</title>
    <link href="https://sunxin18.github.io/2020/03/14/python/"/>
    <id>https://sunxin18.github.io/2020/03/14/python/</id>
    <published>2020-03-14T02:53:38.000Z</published>
    <updated>2020-03-18T02:57:12.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://blog.csdn.net/ImwaterP/article/details/96282230" target="_blank" rel="noopener">https://blog.csdn.net/ImwaterP/article/details/96282230</a></p><h1 id="argmin"><a class="markdownIt-Anchor" href="#argmin"></a> argmin</h1><p>该函数主要用来检索数组中最小值的位置，并返回其下标值。同理，argmax()函数就是用来检索最大值的下标<br>在没有指定axis值的情况下，默认为None。在默认情况下，就相当于将n维的arry平铺在一起。举个简单的例子，当二维arry（[1,2,3],[4,5,6]）平铺开来就是（[1,2,3,4,5,6]）。<br>当axis = 1时，按照方向来，对于[2,5,6]来说最小值的下标是0，对于[7,6,1]来说最小值的下标是2。所以，最后输出的值就是[0,2]。<br>当axis = 0时，这时按照方向来，[2,7],[5,6],[6,1]分别在一个轴上，所以检索每个轴上的最小值，并返回下标，最后就可以得到输出值[0,0,1]。</p><h1 id="关于切片"><a class="markdownIt-Anchor" href="#关于切片"></a> 关于切片</h1><p>在list里面，只存在元素，不存在元素中的元素；list里元素就是最小的成分，不可以再切片。numpy 的array可以切片<br>例如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=np.array([[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">7</span>]])</span><br><span class="line">print(a[<span class="number">2</span>]) print(a[<span class="number">2</span>,:])都可以</span><br><span class="line">a=[[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">7</span>]]</span><br><span class="line">print(a[<span class="number">2</span>,:])会报错</span><br></pre></td></tr></table></figure></div><h1 id="scipyspatialdistancecdist"><a class="markdownIt-Anchor" href="#scipyspatialdistancecdist"></a> scipy.spatial.distance.cdist</h1><p>该函数用于计算两个输入集合的距离，通过metric参数指定计算距离的不同方式得到不同的距离度量值<br><a href="https://blog.csdn.net/kancy110/article/details/75675574" target="_blank" rel="noopener">https://blog.csdn.net/kancy110/article/details/75675574</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法编程" scheme="https://sunxin18.github.io/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="pyton" scheme="https://sunxin18.github.io/tags/pyton/"/>
    
  </entry>
  
</feed>
