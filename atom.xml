<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lalala</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunxin18.github.io/"/>
  <updated>2020-02-05T09:45:09.480Z</updated>
  <id>https://sunxin18.github.io/</id>
  
  <author>
    <name>Sunxin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hashtbale</title>
    <link href="https://sunxin18.github.io/2020/02/04/hashtbale/"/>
    <id>https://sunxin18.github.io/2020/02/04/hashtbale/</id>
    <published>2020-02-04T14:32:43.000Z</published>
    <updated>2020-02-05T09:45:09.480Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>题目49<br>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p><p>思路：哈希表，对排序后的单词作为索引。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; groupAnagrams(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;res;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;cur;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> str:strs)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> s=str;</span><br><span class="line">            sort(s.begin(),s.end());</span><br><span class="line">            cur[s].push_back(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it=cur.begin();it!=cur.end();it++)</span><br><span class="line">            res.push_back(it-&gt;second);</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法编程" scheme="https://sunxin18.github.io/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="字符串" scheme="https://sunxin18.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="哈希表" scheme="https://sunxin18.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>C++编程总结(持续更新)</title>
    <link href="https://sunxin18.github.io/2020/02/03/C/"/>
    <id>https://sunxin18.github.io/2020/02/03/C/</id>
    <published>2020-02-03T14:07:37.000Z</published>
    <updated>2020-02-04T03:38:24.855Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="删除末尾字符"><a href="#删除末尾字符" class="headerlink" title="删除末尾字符"></a>删除末尾字符</h2><p>1.str = str.substr(0, str.length() - 1);<br>2.str.erase(str.end() - 1);<br>3.str.pop_back();</p><h1 id="图编程"><a href="#图编程" class="headerlink" title="图编程"></a>图编程</h1><p>1.以u为顶点出发寻找与u，v能构成三角形的顶点w是，需要遍历u的临边，要注意过跳过v，添加if（v==w）continue<br>2.变量的作用域重叠，导致后来定义会覆盖掉之前的，应定义新的变量<br>3.入队出队寻找followers时，忘记对访问过的边做已访问标记，导致队列不会走空，进入无限循环，运行时间很久，诊断发现内存不断增加。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法编程" scheme="https://sunxin18.github.io/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="https://sunxin18.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>2.3</title>
    <link href="https://sunxin18.github.io/2020/02/03/2-3/"/>
    <id>https://sunxin18.github.io/2020/02/03/2-3/</id>
    <published>2020-02-03T12:34:59.000Z</published>
    <updated>2020-02-05T09:45:19.510Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>题目402：给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。<br>测试用例  112,<br>思路要想使移除k个元素后的数最小，则应该移除最靠左的k个相邻逆序对，包括在一次移除后形成的新的逆序对.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">removeKdigits</span><span class="params">(<span class="built_in">string</span> num, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">int</span> n = num.size(), m = n - k;        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : num) &#123;</span><br><span class="line">            <span class="keyword">while</span> (k &amp;&amp; res.size() &amp;&amp; res.back() &gt; c) &#123;</span><br><span class="line">                res.pop_back();</span><br><span class="line">                --k;</span><br><span class="line">            &#125;</span><br><span class="line">            res.push_back(c);</span><br><span class="line">        &#125;</span><br><span class="line">        res.resize(m);</span><br><span class="line">        <span class="comment">//去除前导0， 如10200，k = 1</span></span><br><span class="line">        <span class="keyword">while</span> (!res.empty() &amp;&amp; res[<span class="number">0</span>] == <span class="string">'0'</span>) &#123;</span><br><span class="line">            res.erase(res.begin());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.empty() ? <span class="string">"0"</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法编程" scheme="https://sunxin18.github.io/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="贪婪算法" scheme="https://sunxin18.github.io/tags/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="https://sunxin18.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>knn应用（癌症判断）</title>
    <link href="https://sunxin18.github.io/2020/02/03/knn/"/>
    <id>https://sunxin18.github.io/2020/02/03/knn/</id>
    <published>2020-02-03T03:54:50.000Z</published>
    <updated>2020-02-04T14:26:00.275Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+%28Original%29" target="_blank" rel="noopener">癌症数据</a><br><a href="https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/" target="_blank" rel="noopener">下载链接</a></p><p>为数据添加label，在第一行加入id,clump_thickness,uniform_cell_size,<br>uniform_cell_shape,marginal_adhesion,<br>single_epi_cell_size,bare_nuclei,bland_chromation,<br>normal_nucleoli,mitoses,class</p><p>数据样式：<br>   clumb_thickness  unif_cell_size  unif_cell_shape  marg_adhesion  single_epith_cell_size bare_nuclei  bland_chrom  norm_nucleoli  mitoses  class<br>0                5               1                1              1                       2           1            3              1        1      2<br>1                5               4                4              5                       7          10            3              2        1      2<br>2                3               1                1              1                       2           2            3              1        1      2<br>3                6               8                8              1                       3           4            3              7        1      2<br>4                4               1                1              3                       2           1            3              1        1      2</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing ,model_selection,neighbors</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'breast-cancer-wisconsin.txt'</span>)<span class="comment">#encoding='utf-8',header=None,sep = '\t'</span></span><br><span class="line">df.replace(<span class="string">'?'</span>,<span class="number">-99999</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment">#print([column for column in df])</span></span><br><span class="line">df.drop([<span class="string">'id'</span>], <span class="number">1</span>, inplace=<span class="keyword">True</span>)  <span class="comment">#df.drop returns a new dataframe with our chosen column(s) dropped.</span></span><br><span class="line"><span class="comment">#df=df.iloc[:,1:]#.iloc使用全是以0开头的行号和列号，不能直接用其它索引哦。而.loc使用的实际设置的索引和列名。 这就是.loc和.iloc的区别。在实际运用中，我还发现一点区别，.iloc只能选取数据表里实际有的行和列，而.loc可以选取没有的行和列，赋值后就可以添加新行或者列。</span></span><br><span class="line">X = np.array(df.drop([<span class="string">'class'</span>],<span class="number">1</span>))</span><br><span class="line">y = np.array(df[<span class="string">'class'</span>])</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print([column for column in df])</span></span><br><span class="line"><span class="comment">#clf = LinearRegression(n_jobs=-1)#SVM.svr() kernel='poly'</span></span><br><span class="line">clf = neighbors.KNeighborsClassifier()</span><br><span class="line">clf.fit(X_train,y_train)</span><br><span class="line"></span><br><span class="line">accuracy = clf.score(X_test,y_test)</span><br><span class="line">print(accuracy)</span><br><span class="line">print(df.head())</span><br><span class="line"></span><br><span class="line"><span class="comment">#example_measures = np.array([4,2,1,1,1,2,3,2,1])  #一个sample</span></span><br><span class="line"><span class="comment">#example_measures = example_measures.reshape(1, -1)  #Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample</span></span><br><span class="line">example_measures = np.array([[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]])<span class="comment">#测试用例</span></span><br><span class="line">example_measures = example_measures.reshape(len(example_measures), <span class="number">-1</span>)</span><br><span class="line">prediction = clf.predict(example_measures)</span><br><span class="line"></span><br><span class="line">print(prediction)</span><br></pre></td></tr></table></figure></div><p>accuracy:0.9714285714285714<br>预测结果：prediction[2 2]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="机器学习" scheme="https://sunxin18.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="应用" scheme="https://sunxin18.github.io/tags/%E5%BA%94%E7%94%A8/"/>
    
      <category term="KNN" scheme="https://sunxin18.github.io/tags/KNN/"/>
    
  </entry>
  
  <entry>
    <title>实现regression</title>
    <link href="https://sunxin18.github.io/2020/02/01/regression/"/>
    <id>https://sunxin18.github.io/2020/02/01/regression/</id>
    <published>2020-02-01T06:32:13.000Z</published>
    <updated>2020-02-01T09:03:22.339Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>两个error：bias,variance<br><a href="/2020/02/01/regression/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/02/01/regression/1.png" alt title></a><br><a href="/2020/02/01/regression/2.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/02/01/regression/2.png" alt title></a><br>What to do with large bias?<br>1.Add more features as input<br>2.模型更复杂<br>What to do with large variance?<br>1.更多数据<br>2.增加正则化</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> statistics <span class="keyword">import</span> mean</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> style</span><br><span class="line">style.use(<span class="string">'ggplot'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_dataset</span><span class="params">(hm,variance,step=<span class="number">2</span>,correlation=False)</span>:</span></span><br><span class="line">    val = <span class="number">1</span></span><br><span class="line">    ys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(hm):</span><br><span class="line">        y = val + random.randrange(-variance,variance)</span><br><span class="line">        ys.append(y)</span><br><span class="line">        <span class="keyword">if</span> correlation <span class="keyword">and</span> correlation == <span class="string">'pos'</span>:</span><br><span class="line">            val+=step</span><br><span class="line">        <span class="keyword">elif</span> correlation <span class="keyword">and</span> correlation == <span class="string">'neg'</span>:</span><br><span class="line">            val-=step</span><br><span class="line"></span><br><span class="line">    xs = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ys))]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> np.array(xs, dtype=np.float64),np.array(ys,dtype=np.float64)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_fit_slope_and_intercept</span><span class="params">(xs,ys)</span>:</span></span><br><span class="line">    m = (mean(xs)*mean(ys)-mean(xs*ys)) / (mean(xs)*mean(xs)-mean(xs*xs))</span><br><span class="line">    b= mean(ys)-m*mean(xs)</span><br><span class="line">    <span class="keyword">return</span> m,b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squared_error</span><span class="params">(ys_orig,ys_line)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum((ys_line - ys_orig) * (ys_line - ys_orig))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coefficient_of_determination</span><span class="params">(ys_orig,ys_line)</span>:</span></span><br><span class="line">    y_mean_line = [mean(ys_orig) <span class="keyword">for</span> y <span class="keyword">in</span> ys_orig]</span><br><span class="line"></span><br><span class="line">    squared_error_regr = sum((ys_line - ys_orig) * (ys_line - ys_orig))</span><br><span class="line">    squared_error_y_mean = sum((y_mean_line - ys_orig) * (y_mean_line - ys_orig))</span><br><span class="line"></span><br><span class="line">    print(squared_error_regr)</span><br><span class="line">    print(squared_error_y_mean)</span><br><span class="line"></span><br><span class="line">    r_squared = <span class="number">1</span> - (squared_error_regr/squared_error_y_mean)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r_squared</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xs, ys = create_dataset(<span class="number">40</span>,<span class="number">40</span>,<span class="number">2</span>,correlation=<span class="string">'pos'</span>)</span><br><span class="line">m, b = best_fit_slope_and_intercept(xs,ys)</span><br><span class="line">regression_line = [(m*x)+b <span class="keyword">for</span> x <span class="keyword">in</span> xs]</span><br><span class="line">r_squared = coefficient_of_determination(ys,regression_line)</span><br><span class="line">print(r_squared)</span><br><span class="line">plt.scatter(xs,ys,color=<span class="string">'#003F72'</span>, label = <span class="string">'data'</span>)</span><br><span class="line">plt.plot(xs, regression_line, label = <span class="string">'regression line'</span>)</span><br><span class="line">plt.legend(loc=<span class="number">4</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p>R-square：分子是预测数据与原始数据均值之差的平方和，分母是原始数据和均值之差的平方和<br>R-square=0.5288792849075254<br><a href="/2020/02/01/regression/3.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/02/01/regression/3.png" alt title></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="machine learning" scheme="https://sunxin18.github.io/categories/machine-learning/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode1326</title>
    <link href="https://sunxin18.github.io/2020/01/26/leetcode1326/"/>
    <id>https://sunxin18.github.io/2020/01/26/leetcode1326/</id>
    <published>2020-01-26T12:26:26.000Z</published>
    <updated>2020-02-05T09:45:27.300Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1326.灌溉花园的最少水龙头数目</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">10001</span>];</span><br><span class="line">    <span class="keyword">int</span> INF= <span class="number">0x3f3f3f3f</span>;    <span class="comment">//定义为无穷大，意味着无法灌溉</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minTaps</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ranges)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,INF,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ranges.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> L = max(<span class="number">0</span>,i-ranges[i]);</span><br><span class="line">            <span class="keyword">int</span> R = min(n,i+ranges[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = L; j &lt;= R; j++)&#123;</span><br><span class="line">                dp[j] = min(dp[j],dp[L]+<span class="number">1</span>); <span class="comment">//</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n] == INF ? <span class="number">-1</span> : dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法编程" scheme="https://sunxin18.github.io/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="动态规划" scheme="https://sunxin18.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>博客报错总结</title>
    <link href="https://sunxin18.github.io/2020/01/21/error/"/>
    <id>https://sunxin18.github.io/2020/01/21/error/</id>
    <published>2020-01-21T05:55:03.000Z</published>
    <updated>2020-02-05T09:45:01.534Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>github解决端口22不能连接错误<br>报错内容：ssh: connect to host github.com port 22: Connection timed out</p><p>解决方法：<br>打开这个文件C:\Program Files\Git\etc\ssh\ssh_config</p><p>添加以下内容：Host github.com<br>User <a href="mailto:xxxxx@email.com" target="_blank" rel="noopener">xxxxx@email.com</a><br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port 443</p><p>报错内容： 出现了npm ERR! Error: EPERM: operation not permitted, open ‘C:\Users\Administrator，npm-v显示bash: npm-v: command not found，<br>解决方法： 输入npm install hexo-deployer-git –save。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gragh</title>
    <link href="https://sunxin18.github.io/2020/01/21/gragh/"/>
    <id>https://sunxin18.github.io/2020/01/21/gragh/</id>
    <published>2020-01-21T02:41:25.000Z</published>
    <updated>2020-01-21T02:41:25.498Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linear regression实战（股票预测）</title>
    <link href="https://sunxin18.github.io/2020/01/14/machine-learning/"/>
    <id>https://sunxin18.github.io/2020/01/14/machine-learning/</id>
    <published>2020-01-14T11:54:12.000Z</published>
    <updated>2020-02-04T03:24:09.336Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>从quandl获取股票数据(Open：开盘价Close：收盘价High：最高价Low：最低价Volume：成交量),留下有用的feature<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> quandl</span><br><span class="line">df =quandl.get(<span class="string">"WIKI/GOOGL"</span>)</span><br><span class="line">df =df[[<span class="string">'Adj. Open'</span>,  <span class="string">'Adj. High'</span>,  <span class="string">'Adj. Low'</span>,  <span class="string">'Adj. Close'</span>, <span class="string">'Adj. Volume'</span>]]</span><br><span class="line">df[<span class="string">'HL_PCT'</span>] = (df[<span class="string">'Adj. High'</span>] - df[<span class="string">'Adj. Low'</span>]) / df[<span class="string">'Adj. Close'</span>] * <span class="number">100.0</span></span><br><span class="line">df[<span class="string">'PCT_change'</span>]=(df[<span class="string">'Adj. Close'</span>] - df[<span class="string">'Adj. Open'</span>]) / df[<span class="string">'Adj. Open'</span>] * <span class="number">100.0</span></span><br><span class="line">df = df[[<span class="string">'Adj. Close'</span>, <span class="string">'HL_PCT'</span>, <span class="string">'PCT_change'</span>, <span class="string">'Adj. Volume'</span>]]</span><br><span class="line">print(df.head())</span><br></pre></td></tr></table></figure></div></p><pre><code>Adj. Close    HL_PCT  PCT_change  Adj. Volume</code></pre><p>Date<br>2004-08-19   50.322842  8.072956    0.324968   44659000.0<br>2004-08-20   54.322689  7.921706    7.227007   22834300.0<br>2004-08-23   54.869377  4.049360   -1.227880   18256100.0<br>2004-08-24   52.597363  7.657099   -5.726357   15247300.0</p><p>fillna() 函数：有一个inplace参数，默认为false，不会对原来dataframe中进行替换，为True时候会修改原来的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">forecast_col=<span class="string">'Adj.Close'</span></span><br><span class="line">df.fillna(value=<span class="number">-9999</span>,inplace=true)</span><br><span class="line">forecast_out = int(math.ceil(<span class="number">0.01</span> * len(df)))<span class="comment">#比如现在有100天的数据，去预测未来一天的</span></span><br><span class="line"></span><br><span class="line">x=np.array(df.drop([<span class="string">'lable'</span>,<span class="number">1</span>]) <span class="comment">#当你要删除某一行或者某一列时，用drop函数，它不改变原有的df中的数据，而是返回另一个dataframe来存放删除后的数据</span></span><br><span class="line">y=np..array(df[<span class="string">'labble'</span>])</span><br><span class="line">X=preprocessing.scale(X) <span class="comment">#特征在[-1,1]</span></span><br></pre></td></tr></table></figure></div><p>Fit(): Method calculates the parameters μ and σ and saves them as internal objects.<br>解释：简单来说，就是求得训练集X的均值啊，方差啊，最大值啊，最小值啊这些训练集X固有的属性。可以理解为一个训练过程</p><p>Transform(): Method using these calculated parameters apply the transformation to a particular dataset.<br>解释：在Fit的基础上，进行标准化，降维，归一化等操作（看具体用的是哪个工具，如PCA，StandardScaler等）。</p><p>Fit_transform(): joins the fit() and transform() method for transformation of dataset.<br>解释：fit_transform是fit和transform的组合，既包括了训练又包含了转换。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">X_lately = X[-forecast_out:]</span><br><span class="line">X_lately=X[-forecast_out:]</span><br><span class="line">y = np.array(df[<span class="string">'label'</span>])</span><br><span class="line">print(len(X), len(y))</span><br><span class="line">X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=<span class="number">0.2</span>)</span><br><span class="line">clf = svm.SVR()<span class="comment">#kernel='poly'</span></span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line">confidence = clf.score(X_test, y_test)</span><br><span class="line">forecast_set = clf.predict(X_lately)</span><br><span class="line">print(confidence,forecast_set)</span><br><span class="line">df[<span class="string">'Forecast'</span>] = np.nan</span><br><span class="line"></span><br><span class="line">last_date = df.iloc[<span class="number">-1</span>].name  <span class="comment">#iloc,loc:https://www.jianshu.com/p/f430d4f1b33f</span></span><br><span class="line">last_unix = last_date.timestamp() <span class="comment">#转化为时间戳</span></span><br><span class="line">one_day = <span class="number">86400</span></span><br><span class="line">next_unix = last_unix + one_day</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> forecast_set:</span><br><span class="line">    next_date = datetime.datetime.fromtimestamp(next_unix)</span><br><span class="line">    next_unix += <span class="number">86400</span></span><br><span class="line">    df.loc[next_date]= [np.nan <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(df.columns)<span class="number">-1</span>)]+[i]</span><br><span class="line"></span><br><span class="line">df[<span class="string">'Adj. Close'</span>].plot()</span><br><span class="line">df[<span class="string">'Forecast'</span>].plot()</span><br><span class="line">plt.legend(loc=<span class="number">4</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Date'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Price'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="机器学习" scheme="https://sunxin18.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="regression" scheme="https://sunxin18.github.io/tags/regression/"/>
    
      <category term="应用" scheme="https://sunxin18.github.io/tags/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>dp</title>
    <link href="https://sunxin18.github.io/2019/12/06/dp/"/>
    <id>https://sunxin18.github.io/2019/12/06/dp/</id>
    <published>2019-12-06T15:55:55.000Z</published>
    <updated>2019-12-06T15:58:28.059Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.最大子序和<br>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p>示例:<br>输入: [-2,1,-3,4,-1,2,1,-5,4],<br>输出: 6<br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp=<span class="number">0</span>,result=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">              <span class="keyword">if</span>(dp&gt;<span class="number">0</span>)</span><br><span class="line">                dp=dp+nums[i];</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                dp=nums[i];</span><br><span class="line">               result=max(result,dp);</span><br><span class="line">                 </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p><p>2.最小路径和<br>给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p>说明：每次只能向下或者向右移动一步。</p><p>示例:</p><p>输入:<br>[<br>  [1,3,1],<br>  [1,5,1],<br>  [4,2,1]<br>]<br>输出: 7<br>解释: 因为路径 1→3→1→1→1 的总和最小。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid.empty())<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp[grid.size()][grid[<span class="number">0</span>].size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;grid.size();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;grid[<span class="number">0</span>].size();j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i==<span class="number">0</span>&amp;&amp;j==<span class="number">0</span>)  dp[<span class="number">0</span>][<span class="number">0</span>]=grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">                        dp[i][j]= dp[i][j<span class="number">-1</span>]+grid[i][j];</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>)</span><br><span class="line">                        dp[i][j]= dp[i<span class="number">-1</span>][j]+grid[i][j];</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        dp[i][j]=min(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>])+grid[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[grid.size()<span class="number">-1</span>][grid[<span class="number">0</span>].size()<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>classify</title>
    <link href="https://sunxin18.github.io/2019/11/05/classify/"/>
    <id>https://sunxin18.github.io/2019/11/05/classify/</id>
    <published>2019-11-05T13:52:18.000Z</published>
    <updated>2020-02-04T03:25:48.983Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Node-Classification"><a href="#Node-Classification" class="headerlink" title="Node Classification"></a>Node Classification</h1><p>Node Classification is the process of assigning labels to nodes within a graph, given a set of existing node labels. This setting corresponds to a semi-supervised setting. While it would be nice to be able to collect the true label values of every node, oftentimes, in real world settings, it is extremely expensive to collect those labels. Consequently, we rely on random sampling to obtain these labels. Then we use that small sample of labels to develop models that generate trustworthy node label predictions for our graph.</p><p>Collective Classification is an umbrella term describing how we assign labels to all nodes in the network together. We then propagate the information from these labels around the network and attempt to come up with stable assignments for each node. We are able to do these tasks because networks have special properties, specifically, correlations between nodes, that we can leverage to build our predictor. Essentially, collective classification relies on the Markov Assumption that the labely $Y_{i}$ of one node depends on the labels of its neighbors, which can be mathematically written as:$P(Y_{i}|i)=P(Y_{i}|N_{i})$</p><p>The three main techniques that are used are Relational Classification, Iterative Classification, and Belief Classification, roughly ordered byhow advanced these methods are.</p><h1 id="Correlations-in-a-Network"><a href="#Correlations-in-a-Network" class="headerlink" title="Correlations in a Network"></a>Correlations in a Network</h1><h2 id="Homophily"><a href="#Homophily" class="headerlink" title="Homophily"></a>Homophily</h2><p>Homophily generally refers to the tendency of individuals to associate and bond with similar others. Similarities, for instance in a social network, can include a variety of attributes, including age, gender, organizational affiliation, taste, and more.</p><h2 id="Influence"><a href="#Influence" class="headerlink" title="Influence"></a>Influence</h2><p>Another example of why networks may demonstrate correlations is Influence. Under these circumstances, the links and edges formed can influence the behavior of the node itself</p><h2 id="Confounding"><a href="#Confounding" class="headerlink" title="Confounding"></a>Confounding</h2><p>Confounding variables can cause nodes to exhibit similar characteristics. For instance, the environment we are raised in may influence our similarity in multiple dimensions, from the language we speak, to our music tastes, to our political preferences.</p><h1 id="Leveraging-Network-Correlations-for-Classification-of-Network-Data"><a href="#Leveraging-Network-Correlations-for-Classification-of-Network-Data" class="headerlink" title="Leveraging Network Correlations for Classification of Network Data"></a>Leveraging Network Correlations for Classification of Network Data</h1><p>Whether or not a particular node X receives a particular label may depend on a variety of factors. In our context, those most commonly include:<br><em>X的featrue</em>X邻居的feature<br><em>X邻居的lable<br>我们也要考虑网络的拓扑结构。Collective classification包括三个部分</em>A local classifier初始化节点lable<br>    -根据节点的属性和特征，不考虑拓扑结构<br><em>A relational classifier is useful because it allows us to capture correlations (e.g. the homophily, influence) between nodes in the network.<br>    -This classifier predicts the label of one node based on the labels and features of its neighbors.<br>    -This classifier predicts the label of one node based on the labels and features of its neighbors.</em>Collective inference propagates the correlations through the network. 经过多次传递，得到邻居点间的contribution<br>    -当节点和邻点之间的差异最小或者到达最大递归次数停止<br>    -节点结构对最终预测有很大的影响<br><a href="/2019/11/05/classify/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2019/11/05/classify/1.png" alt title></a></p><p>To make those predictions, we will use a Probabilistic Relational Classifier, the basic idea of which is that the class probability of $Y_{i}$<br> is a weighted average of the class probabilities of its neighbors. To initialize, we will use the ground-truth labels of our labeled nodes, and for the unlabeled nodes, we will initialize Y uniformly。使用随机的序列</p><p> week points:不能保证收敛，模型没有使用node feature</p><h1 id="Iterative-Classification"><a href="#Iterative-Classification" class="headerlink" title="Iterative Classification"></a>Iterative Classification</h1><p>This is very similar to what we did before with the relational classifier, the key difference being that we now use the feature vector and once again, convergence is not guaranteed.</p><h1 id="Message-Passing-Belief-Propagation"><a href="#Message-Passing-Belief-Propagation" class="headerlink" title="Message Passing/Belief Propagation"></a>Message Passing/Belief Propagation</h1><p><a href="/2019/11/05/classify/2.png" data-fancybox="group" data-caption class="fancybox"><img src="/2019/11/05/classify/2.png" alt title></a><br><a href="/2019/11/05/classify/3.png" data-fancybox="group" data-caption class="fancybox"><img src="/2019/11/05/classify/3.png" alt title></a><br>This equation summarizes our task: to calculate the message from i to j, we will sum over all of our states the label-label potential multiplied by our prior, multiplied by the product of all the messages sent by neighbors from the previous rounds. To initialize, we set all of our messages equal to 1. Then, we calculate our message from i to j, using the formula described above. We will repeat this for each node until we reach convergence, and then we can calculate our final assignment, i’s belief of being in state $Y_{i}$ or $b(Y_{i})$<br><a href="/2019/11/05/classify/4.png" data-fancybox="group" data-caption class="fancybox"><img src="/2019/11/05/classify/4.png" alt title></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="图" scheme="https://sunxin18.github.io/categories/%E5%9B%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode1</title>
    <link href="https://sunxin18.github.io/2019/07/31/leetcode1/"/>
    <id>https://sunxin18.github.io/2019/07/31/leetcode1/</id>
    <published>2019-07-31T13:33:28.000Z</published>
    <updated>2019-12-06T15:48:05.924Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2.两数相加<br>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。<br>示例：<br>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode *answer = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode *curr= answer;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> carry=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">NULL</span>||l2!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=(l1!=<span class="literal">NULL</span>)?l1-&gt;val:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> y=(l2!=<span class="literal">NULL</span>)?l2-&gt;val:<span class="number">0</span>;</span><br><span class="line">            sum=x+y+carry;</span><br><span class="line">            curr-&gt;next= <span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);</span><br><span class="line">            curr=curr-&gt;next;</span><br><span class="line">            carry=sum/<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(l1!=<span class="literal">NULL</span>)</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">             <span class="keyword">if</span>(l2!=<span class="literal">NULL</span>)</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">          <span class="keyword">if</span> (carry &gt; <span class="number">0</span>)</span><br><span class="line">            curr-&gt;next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        <span class="keyword">return</span> answer-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p><p>9.回文数<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def isPalindrome(self, x):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> str(x)==str(x)[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></div></p><p>11盛水最多的容器<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=height.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">        &#123;</span><br><span class="line">            result=max(result,(j-i)*min(height[i],height[j]));</span><br><span class="line">            <span class="keyword">if</span>(height[i]&gt;=height[j])</span><br><span class="line">                j--;</span><br><span class="line">             <span class="keyword">else</span></span><br><span class="line">                i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p><p>14.最长公共前缀<br>方法一：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>; </span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strs[<span class="number">0</span>].size();i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;strs.size()<span class="number">-1</span>;k++)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span> (strs[k][i]!=strs[k+<span class="number">1</span>][i])</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">return</span> str;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            str=str+strs[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p><p>方法二：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    def longestCommonPrefix(self, strs: List[str]) -&gt; str:</span><br><span class="line">         <span class="keyword">return</span> os.path.commonprefix(strs)</span><br></pre></td></tr></table></figure></div></p><p>方法三：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">       def longestCommonPrefix(self, strs):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        s1 = min(strs)</span><br><span class="line">        s2 = max(strs)</span><br><span class="line">        <span class="keyword">for</span> i,x in enumerate(s1):</span><br><span class="line">            <span class="keyword">if</span> x != s2[i]:</span><br><span class="line">                <span class="keyword">return</span> s2[:i]</span><br><span class="line">        <span class="keyword">return</span> s1</span><br></pre></td></tr></table></figure></div></p><p>14.三数之和<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> target;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">             <span class="keyword">if</span> ((target = nums[i]) &gt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">             <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> l = i + <span class="number">1</span>, r = nums.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[l] + nums[r] + target &lt; <span class="number">0</span>) ++l;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[l] + nums[r] + target &gt; <span class="number">0</span>) --r;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans.push_back(&#123;target, nums[l], nums[r]&#125;);</span><br><span class="line">                    ++l, --r;</span><br><span class="line">                    <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l - <span class="number">1</span>]) ++l;</span><br><span class="line">                    <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r + <span class="number">1</span>]) --r;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p><p>16最近接的三数值和<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span> </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        sort(nums.begin(),nums.end());</span><br><span class="line">        <span class="keyword">int</span> a=nums[<span class="number">0</span>]+nums[<span class="number">1</span>]+nums[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-2</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i<span class="number">-1</span>])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> l=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> r=nums.size()<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> sum=nums[i]+nums[l]+nums[r];</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(sum-target)&lt;<span class="built_in">abs</span>(a-target))</span><br><span class="line">                    a=sum;</span><br><span class="line">                <span class="keyword">if</span>(sum&gt;target)</span><br><span class="line">                    r--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;target)</span><br><span class="line">                    l++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum==target)</span><br><span class="line">                    <span class="keyword">return</span> sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p><p>19删除链表倒数第N个节点<br>快慢指针，相差n<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">         ListNode*p1=head;</span><br><span class="line">         ListNode*p2=head;</span><br><span class="line">        <span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p1=p1-&gt;next;</span><br><span class="line">            n--; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p1==<span class="literal">NULL</span>)<span class="keyword">return</span> head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>((p1-&gt;next)!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">             p1=p1-&gt;next;</span><br><span class="line">             p2=p2-&gt;next;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">        p2-&gt;next=p2-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p><p>20.有效括号<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt;a;</span><br><span class="line">      <span class="keyword">if</span>(s.size()%<span class="number">2</span>!=<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">auto</span> i:s)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span>(i==<span class="string">'['</span>||i==<span class="string">'&#123;'</span>||i==<span class="string">'('</span>)</span><br><span class="line">                  a.push(i);</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span>(a.size()==<span class="number">0</span>&amp;&amp;(i==<span class="string">']'</span>||i==<span class="string">'&#125;'</span>||i==<span class="string">')'</span>))   </span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span>((i==<span class="string">']'</span>&amp;&amp;a.top()!=<span class="string">'['</span>)||(i==<span class="string">'&#125;'</span>&amp;&amp;a.top()!=<span class="string">'&#123;'</span>)||(i==<span class="string">')'</span>&amp;&amp;a.top()!=<span class="string">'('</span>))</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">else</span> </span><br><span class="line">                  a.pop();</span><br><span class="line">             &#125;     </span><br><span class="line">      </span><br><span class="line">           &#125;</span><br><span class="line">        <span class="keyword">if</span>(a.size()!=<span class="number">0</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p><p>26删除排序数组中的重复项<br>双指针<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums.size();j++)</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=nums[j])</span><br><span class="line">            &#123;</span><br><span class="line">                nums[i+<span class="number">1</span>]=nums[j];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">return</span> i+<span class="number">1</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p><p>28实现strSTR()<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (needle.size() &gt; haystack.size()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">         <span class="keyword">if</span> (needle==haystack)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len=needle.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;haystack.size()-len+<span class="number">1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(needle==haystack.substr(i,len))<span class="keyword">return</span> i;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p><p>88.合并两个有序数组<br>从后向前插入数。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=m<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> j=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> len=m+n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span>&amp;&amp;j&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i]&gt;nums2[j])</span><br><span class="line">                nums1[len--]=nums1[i--];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nums1[len--]=nums2[j--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span>)</span><br><span class="line">            nums1[len--]=nums2[j--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p><ol start="75"><li>颜色分类<br>方法一：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span>(nums[i]==<span class="number">0</span>)</span><br><span class="line">            a++;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]==<span class="number">1</span>)</span><br><span class="line">            b++;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]==<span class="number">2</span>)</span><br><span class="line">            c++;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(;j&lt;a;j++)</span><br><span class="line">        nums[j]=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(;j&lt;b+a;j++)</span><br><span class="line">        nums[j]=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(;j&lt;a+b+c;j++)</span><br><span class="line">        nums[j]=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></li></ol><p>方法二：荷兰国旗问题：<br><a href="https://en.wikipedia.org/wiki/Dutch_national_flag_problem" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Dutch_national_flag_problem</a><br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p0=<span class="number">0</span>,p2=nums.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur&lt;=p2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[cur]==<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(nums[p2],nums[cur]);</span><br><span class="line">                p2--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[cur]==<span class="number">1</span>)</span><br><span class="line">                cur++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[cur]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(nums[p0],nums[cur]);</span><br><span class="line">                p0++,cur++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p><p>17.电话号码的字母组合<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="built_in">string</span>&gt; mp=&#123;&#123;<span class="string">'2'</span>,<span class="string">"abc"</span>&#125;,&#123;<span class="string">'3'</span>,<span class="string">"def"</span>&#125;,&#123;<span class="string">'4'</span>,<span class="string">"ghi"</span>&#125;,&#123;<span class="string">'5'</span>,<span class="string">"jkl"</span>&#125;,&#123;<span class="string">'6'</span>,<span class="string">"mno"</span>&#125;,&#123;<span class="string">'7'</span>,<span class="string">"pqrs"</span>&#125;,&#123;<span class="string">'8'</span>,<span class="string">"tuv"</span>&#125;,&#123;<span class="string">'9'</span>,<span class="string">"wxyz"</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;res;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="built_in">string</span> cur,<span class="built_in">string</span> next_word)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(next_word.size()==<span class="number">0</span>)</span><br><span class="line">            res.push_back(cur);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> digit=next_word[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">string</span> letters=mp[digit];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;letters.size();i++)</span><br><span class="line">            &#123;</span><br><span class="line">                cur=cur+letters.substr(i,<span class="number">1</span>);</span><br><span class="line">                next_word=next_word.substr(<span class="number">1</span>);</span><br><span class="line">                DFS(cur,next_word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits)&#123;</span><br><span class="line">          <span class="keyword">if</span>(digits.size()==<span class="number">0</span>)</span><br><span class="line">              <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">              DFS(<span class="string">""</span>,digits);</span><br><span class="line">          <span class="keyword">return</span> res;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python数据可视化</title>
    <link href="https://sunxin18.github.io/2019/07/22/python-1/"/>
    <id>https://sunxin18.github.io/2019/07/22/python-1/</id>
    <published>2019-07-22T12:13:47.000Z</published>
    <updated>2019-09-20T09:24:12.452Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>数据可视化是指通过可视化表示来搜索数据，与数据挖掘仅仅相关<br>一、安装matplotlib<br>进入命令行，输入pip install matplotlib便会自动安装。<br>二、绘制简单曲线<br><code>`</code>python</p><p>#coding=gbk<br>import matplotlib.pyplot as plt<br>import numpy as np<br>squares=[1,4,9,16,25]<br>plt.plot(squares,linewidth=5)</p><p>#设置标题以及坐标标签<br>plt.title(“Square Numbers”,fontsize=24)<br>plt.xlabel(“Value”,fontsize=14)<br>plt.ylabel(“Square of Value”,fontsize=14)</p><p>#设置刻度标记的大小<br>plt.tick_params(axis=’both’,labelsize=14)<br>plt.show()<br><a href="/images/图形1.jpg" data-fancybox="group" data-caption class="fancybox"><img src="/images/图形1.jpg" alt title></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>heart</title>
    <link href="https://sunxin18.github.io/2019/05/03/heart/"/>
    <id>https://sunxin18.github.io/2019/05/03/heart/</id>
    <published>2019-05-03T04:23:49.000Z</published>
    <updated>2019-07-21T06:30:01.568Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><br></p><p><br><br><br><br><br><br><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="心里话" scheme="https://sunxin18.github.io/categories/%E5%BF%83%E9%87%8C%E8%AF%9D/"/>
    
    
  </entry>
  
  <entry>
    <title>记录一下</title>
    <link href="https://sunxin18.github.io/2019/04/28/wanqing/"/>
    <id>https://sunxin18.github.io/2019/04/28/wanqing/</id>
    <published>2019-04-28T14:53:29.000Z</published>
    <updated>2019-05-05T02:14:54.539Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哎</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="生活" scheme="https://sunxin18.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>2013年浙江大学复试机试模拟题</title>
    <link href="https://sunxin18.github.io/2019/03/15/oj/"/>
    <id>https://sunxin18.github.io/2019/03/15/oj/</id>
    <published>2019-03-15T14:48:31.000Z</published>
    <updated>2019-05-02T14:50:25.573Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>题目描述</p><p>Xiao Ming’s parents visit ZJU and Xiao Ming want to take them to look around the campus.They will start from the stone with two famous question raised by President Zhu Kezhen and end at largest dining room in Asia.They want to visit every place exactly once in ZJU’s campus,including the stone and dining room.</p><p>输入<br>The input consists of multiple test cases.<br>The first line contains an integer n(n&lt;=20),which means the number of place in ZJU’s campus.We give numbers(from 1 to n﻿) to the places,especailly,1 means the stone with two famous question and n means the largest dining room.<br>The second line contains an integer m,which means the number of roads between two place.<br>Then follows m lines,each line contain two integer,which means there is a road between these two place.The road will not repeat more than one time.</p><p>输出<br>For each test case, you should output one line.If the path exists,you should output 1.Otherwise,you should output 0.</p><p>样例输入<br>5</p><p>4</p><p>1 2</p><p>1 3</p><p>1 4</p><p>2 5</p><p>6</p><p>6</p><p>1 3</p><p>3 2</p><p>1 2</p><p>3 4</p><p>4 5</p><p>5 6</p><p>样例输出<br>0</p><p>1</p><p>来源<br>2013年浙江大学复试机试模拟题</p><p>#include&lt;stdio.h&gt;</p><p>#include&lt;string.h&gt;<br>int n,m,ok;<br>int vis[22],Map[22][22];</p><p>//搜索，已经访问count个地方现在处于location点<br>void DFS(int location,int count)<br>{<br>    int i;<br>    //已经全部访问完<br>    if(count == n){<br>        //到达目的地n<br>        if(location == n){<br>            ok = 1;<br>        }<br>        return;<br>    }<br>    //没有访问完，访问下一处<br>    for(i = 1;i &lt;= n;i++){<br>        //i点没访问过且能访问则去i点<br>        if(Map[location][i] == 1&amp;&amp; vis[i] == 0){<br>            //标记i已经访问过<br>            vis[i]=1;<br>            //递归下一处<br>            DFS(i,count+1);<br>            if(ok == 1){<br>                return;<br>            }<br>            //取消标记<br>            vis[i] = 0;<br>        }<br>    }<br>}<br>//初始化<br>void Init()<br>{<br>    int i,j,start,end;<br>    //初始化地图<br>    for(i = 1;i &lt;= n;i++){<br>        for(j = 1;j &lt;= n;j++){<br>            Map[i][j]=0;<br>        }<br>    }<br>    //添加路况<br>    for(i = 0;i &lt; m;i++){<br>        scanf(“%d %d”,&amp;start,&amp;end);<br>        //end和start之间联通<br>        Map[start][end]=1;<br>        Map[end][start]=1;<br>    }<br>    memset(vis,0,sizeof(vis));<br>    ok = 0;<br>    //1为出发点<br>    vis[1]=1;<br>}<br>int main()<br>{<br>    while(scanf(“%d %d”,&amp;n,&amp;m)!=EOF){<br>        Init();<br>        DFS(1,1);<br>        printf(“%d\n”,ok);<br>    }<br>    return 0;<br>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法编程" scheme="https://sunxin18.github.io/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>准备复试</title>
    <link href="https://sunxin18.github.io/2019/02/22/hello-world/"/>
    <id>https://sunxin18.github.io/2019/02/22/hello-world/</id>
    <published>2019-02-22T09:39:22.935Z</published>
    <updated>2019-05-02T12:16:09.969Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>   复试加油，相信自己！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="life" scheme="https://sunxin18.github.io/categories/life/"/>
    
    
  </entry>
  
</feed>
