<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lalala</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunxin18.github.io/"/>
  <updated>2020-05-20T14:31:03.595Z</updated>
  <id>https://sunxin18.github.io/</id>
  
  <author>
    <name>Sunxin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>520随笔</title>
    <link href="https://sunxin18.github.io/2020/05/20/520/"/>
    <id>https://sunxin18.github.io/2020/05/20/520/</id>
    <published>2020-05-20T12:16:10.000Z</published>
    <updated>2020-05-20T14:31:03.595Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="哎呀你输错了！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">哎别看了。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e90f2f5a448e34b2ea8017f84dac826486ae1ffaa273e94fb825f34de685ef6f">38cd76bef1cf79f27267863aa0f1e10aff0a55b3032fb665653565d974dcbbb6fb9e335fcb6f2cac947609853f0c56f0dbf7300ebc6e47358c153341a4c18fe59abedea6571c7603dd0c3ebeb08faededad4174f6c6eeda32fe389116f16e28f0210187cfa4a272439508fc90658c1b2309a116992d303d700f05971b0e4855d4f4ff589cfc7838359191bd9ee6077a648cc1789b19943078668c653d9694c0c484aaaa3e126d8a153c6e91c689217e97fdcb7997cda884612bdc08273526ce25218be87d4e2e255eb3c4ca3b4dbf1cc024980b9f2f4ce785cdf6de891ab6a1536a4c01c9f554ac2e2f6bbda9c04bcb15e330b4f3a9880d8ee73ae2833c99fa3a9f4bb9df331333ee171fe0e209169b8e7f44cde52823dfc44175ca775869d9489573b4d8d3f7e5660992d72f196f0af80b4689a24c6c3ed0924237be67d87425d4e2cc12837bd5e49afda9fc2d3e4a491e1d8a1576f92fd39fbe4c7f0e974752aea04a0b3f3a19b05f612f27de86ccac7dedacf463db399a9a71ee518cca6bcbab34d62fc28bffd5de965e71733ec15fd0729c776fe439b48efbf49e15371dcc64ec318d79e7eb3ec00bb7975e0397898ff362c6a5d2ba386d91c39eab42d5643a8ebca04e3d3183b1d31944d5d3a89b8f1f77071347327e7698dc2cd017cee31d6c80add9fdada246dde4d94f9338b5d179901df6c5cffb8ca88ff536b42fac9601cc7b7577b35b4268523f12ddc3637b86673e567f2e38932298bebec6d052beca3d31b3155d8337b08205099aa1a2600bdcffb6202f8913e91e0931e52471ab53c45db6318bba46f5ffda10af80fd543f319daee9c740f813f1087c941d69fe69b55f1504700ebd2c912bd447a0498518c5ade152a6417a315e0f2ede91523ffe18058d7d0a8d07adae20334a365bfb85c24ba4a0738582947e92a5948cc9181521e368d9bd78aaee763685065c46bfbee8e47c22892facd1937bca21e13e2ee89f489bce0557b8452f65d717a1ad4f6521c894de2157e4428ed516465a8ceb3001ea9822434e2bdc220d6e5a5bcfe9e74ff007533ae6589aca33e490f2b096f4d25f6f4f3130a7f9b070dcdb9e75d94c695d9da0335d1cfe82030aaccd3d9dafd88068fb26a61498486d604435bd2fafceaee0f22e21d221ad2b0a00cfe83417c7ceeef9084a31a1ebdaa51e9c5e76648ad08fe8841594e8db47295c7b989014bc39fe18424776bd9c31173ef34bfbd697cd6feb639851c5e33fdf628d3b90196c65f2e9ca9194d515721d15295503dc1702856140eec363fd2335dded9f82fed6a671f093bbcea8ca662a62835580625f9b14e16d93c261b9149ab494042254ae6165d762c90758e25289102afdffb49af864ea746ace8f289f623e2436258221be918d9e4be3984666c61fb06d14d68aa2d4085ab17abb21b0230a28693f4e17c567ede96ad5f0d699ea368dddcf9c902408ebe64ebf6cd0a6c602cbd4153b8c92f656bca5ca9b5f451ea05f75055a8469b3d7e5383b1aa9f92eb0ec2b42d076405b126812b0ee8f0e33264b25be39a9d3a6381e4f3f39819594103c46ab09cddb95462ca8fbf7bcf6e069b538bef35576c84da22d65af3ccec312c32823ec95fb00c61394ad4d40037d1d05405780a519a347dfaefb7d0f377f9d86c47f5c609c4e6114d29164e6d69304bfe627469a900da49a6eb62aacbb95dc2f3eb66d899aa7f76857f9d1ed88570e455245edcfb9d4ec94882e857f8213ed0c9ce528a26ecfe418164a4f88544aa7456b49050b09cedea60fdee1578221503c29466aa90205c2e785237b960c38f487f4b137d95cc6b49e681fc7dc36d4920650a617e455ae828a91a2d07cfcce517f49abd9f69d000850af66280b13b91d96d402c1fe071faa10aaf614eaff8af0e61ac5e7fe1aa9ef7b1e4529b4250a8092a480e1122a791e51499442d40dedc055f8898d64ff16753d4e509975fb21ae02d4236599e6026fbf428754497ac166386a9265001a9449b60892b766fc69975e792a2f94ed23554319f77404491bf34f99ce7b96b78aea1116b3c1f2e5af5a2d1fa9d61a771de32b0177384cf85a9c8c98a9993e5d68fc21929e026e1eb4ec17dc7de988993d45e089fd17725d71b8eb365307213872c2dc5fde4f74f4646f7829554d120c00fdeec9f7c62c72e247542106894b422b5cf29440676933d7d461fb81d9f8b5318a75a5638b667d414a8b929a5510368a2cf4f65b2323598030c91806efd5ae251c11772057af01c37d50d2f4ee942f60a8e2c77bdded0b768953ce489465bdac6b060346fdcf22b00648aaf758d4ff6605a4788216dce12ada57bbe27922ca1aee2b96253544e140b9b5cb26f3731b8f5baeafbec5b9455ad194f606ba3ee71a3e5462ff0c45c343906e94bed6e8b00fb749349ead29a364ae720859d409346cab53d1dcbf245e18e21c7fb2689e0ca602948fdbb84e1371f0c8f</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="随笔" scheme="https://sunxin18.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>seq2seq</title>
    <link href="https://sunxin18.github.io/2020/05/20/seq2/"/>
    <id>https://sunxin18.github.io/2020/05/20/seq2/</id>
    <published>2020-05-20T07:36:23.000Z</published>
    <updated>2020-05-20T11:01:34.510Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文将介绍seq2seq模型以及机器翻译的内容</p><h2 id="seq2seq"><a href="#seq2seq" class="headerlink" title="seq2seq"></a>seq2seq</h2><p>  seq2seq(sequence to sequence)故名思意就是一种能够根据给定的序列，通过特定的方法生成另一个序列的方法，属于encoder-decoder结构的一种，这里看看常见的encoder-decoder结构，基本思想就是利用两个RNN，一个RNN作为encoder，另一个RNN作为decoder。encoder负责将输入序列压缩成指定长度的向量，这个向量就可以看成是这个序列的语义，这个过程称为编码，如下图，获取语义向量最简单的方式就是直接将最后一个输入的隐状态作为语义向量C。也可以对最后一个隐含状态做一个变换得到语义向量，还可以将输入序列的所有隐含状态做一个变换得到语义变量。<br>   而decoder则负责根据语义向量生成指定的序列，这个过程也称为解码，如下图，最简单的方式是将encoder得到的语义变量作为初始状态输入到decoder的RNN中，得到输出序列。可以看到上一时刻的输出会作为当前时刻的输入，而且其中语义向量C只作为初始状态参与运算，后面的运算都与语义向量C无关。<br>seq2seq应用在机器翻译、对话机器人等领域，后续会补充一些项目实战，下面先介绍一下基础思路<br><a href="/2020/05/20/seq2/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/seq2/1.png" alt title></a><br><a href="/2020/05/20/seq2/2.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/seq2/2.png" alt title></a></p><h2 id="seq2seq训练"><a href="#seq2seq训练" class="headerlink" title="seq2seq训练"></a>seq2seq训练</h2><p>训练数据为&lt;中文，英文&gt;，然后我们将每个minibatch中语句的长度补成相同（与最大长度相同），不同的minibatch不要求相同长度，这样方便进行向量化矩阵化(matrix)操作，</p><h2 id="infereence-Decoding"><a href="#infereence-Decoding" class="headerlink" title="infereence/Decoding"></a>infereence/Decoding</h2><p>如果我们已经训练好了模型参数，怎么生成语句序列呢呢？<br><a href="/2020/05/20/seq2/3.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/seq2/3.png" alt title></a><br>通过模型softmax，我们可以得到每个单词的概率分布，然后每次选取概率最大的作为生成词(greedy)，但如果我们只考虑每个单词(unigram)，即使生成的语句单词相同，如果顺序不同就会不通顺，没有好的语法结构，所以可以用bgram。<br>如何改进只能考虑局部最优解呢？下面有两个改进想法，exhaustic search,beam search</p><h3 id="exhaustic-search"><a href="#exhaustic-search" class="headerlink" title="exhaustic search"></a>exhaustic search</h3><p>就是每次都考虑所有单词的情况，而不是只选择概率最高的单词，这样肯定可以找到全局最优解，但是这样就会复杂度很高，为$O(\left | v\right |^{T})$</p><h3 id="beam-search"><a href="#beam-search" class="headerlink" title="beam search"></a>beam search</h3><p>exhaustic search复杂度太高，我们考虑使用beam search，这种方法是既考虑了贪心算法的改进也对复杂度降低，如果我们设三种方法的最优解是$T_{o}$,$T_{e}$,$T_{b}$,那么$T_{o} \subset T_{e} \subset T_{b}$<br>beam search的想法是每次只考虑最好的k个单词，接下来是对第一次最好的k个单词继续考虑第二个生成单词也是取概率最高的前k个,但如果这样继续下去又是指数级增长了，所以是取对目前的序列（目前也就是长度为2）的概率和（其实是概率的乘积，但因为取了log）最高的k个序列，最后直到序列预测到end时停止，这样考虑也是有局限的，因为可能有的序列到很短就停止了，这样他的值就很大，最优解会优先选他，所以这块我们对每个序列除以长度。<br>每一步最多考虑$k^{2}$个可能性，这个算法的复杂度为$O(k^{2}T)$<br><a href="/2020/05/20/seq2/4.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/seq2/4.png" alt title></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="自然语言处理" scheme="https://sunxin18.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="seq2seq" scheme="https://sunxin18.github.io/tags/seq2seq/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunxin18.github.io/2020/05/20/attention/"/>
    <id>https://sunxin18.github.io/2020/05/20/attention/</id>
    <published>2020-05-20T00:50:58.302Z</published>
    <updated>2020-05-20T14:07:19.499Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>title: attention<br>date: 2020-05-20 08:50:58<br>tags: attention<br>categories: 自然语言处理<br>cover: <a href="https://i.loli.net/2020/05/20/taH9rqVgoxmpIhY.jpg" target="_blank" rel="noopener">https://i.loli.net/2020/05/20/taH9rqVgoxmpIhY.jpg</a><br>本文我们将讲解注意力机制在视觉和自然语言以及图挖掘领域的使用。<br>PyTorch：<a href="https://github.com/sgrvinod/a-PyTorch-Tutorial-to-Image-Captioning" target="_blank" rel="noopener">https://github.com/sgrvinod/a-PyTorch-Tutorial-to-Image-Captioning</a></p><h2 id="mutimodal-learning"><a href="#mutimodal-learning" class="headerlink" title="mutimodal learning"></a>mutimodal learning</h2><p>即将多个模型连接起来，每个模型完成相应的任务，一起完成比如看图说话、提取摘要等任务。<br><a href="/2020/05/20/attention/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/attention/1.png" alt title></a></p><h2 id="attention-注意力机制"><a href="#attention-注意力机制" class="headerlink" title="attention(注意力机制)"></a>attention(注意力机制)</h2><p>将注意力放到重要的地方，比较符合人类的思考，可以应用在文本、图像、自注意力(self-attention)</p><h3 id="看图说话"><a href="#看图说话" class="headerlink" title="看图说话"></a>看图说话</h3><p>先把图片提取出一个向量作为桥梁，我们取模型中倒数第二个向量v，wih是一个转移矩阵,输入到RNN中来生成语句序列<br>但这模型有些问题，</p><ol><li>识别不出来某些物体</li><li>我们把图片等价于一个向量，通过这个向量来生成，其实有时候我们只需要关注图片中的一直猫，不需要理解整张图片<br><a href="/2020/05/20/attention/2.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/attention/2.png" alt title></a></li></ol><p>##图像识别的注意力机制<br>这里feature矩阵每个格子都是一个d维的向量，a1也是一个3×3的矩阵，每个格代表这个区域的权重，当我们生成第一个单词我们要将注意力放在概率最高的区域，然后将这个两个矩阵的信息进行汇集到向量$Z$，较于之前的seq2seq模型，我们这里就多了一个$Z$<br><a href="/2020/05/20/attention/3.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/attention/3.png" alt title></a><br>我们将$z1$输入到rnn模型，这里的first word就是start ，通过h1输出第一个单词和第二个单词的注意力，然后再生成$z2$,这里的$y2$就是的$d1$<br><a href="/2020/05/20/attention/4.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/05/20/attention/4.png" alt title></a></p><p><a href="https://blog.csdn.net/shenxiaolu1984/article/details/51493673#fn:1" target="_blank" rel="noopener">https://blog.csdn.net/shenxiaolu1984/article/details/51493673#fn:1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>算法优化</title>
    <link href="https://sunxin18.github.io/2020/05/15/optimize/"/>
    <id>https://sunxin18.github.io/2020/05/15/optimize/</id>
    <published>2020-05-15T05:44:11.000Z</published>
    <updated>2020-05-20T14:07:54.831Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本系列将探讨算法的优化。</p><h2 id="思维的改进"><a href="#思维的改进" class="headerlink" title="思维的改进"></a>思维的改进</h2><p>LCP08.剧情触发时间<br>最开始的想法同时考虑三个属性，每到新的一天就遍历requirements数组，看能否有剧情出发，果不其然超时了，最后两个样例没通过<br>之后进行改进。<br>首先如果只考虑一种属性，显然我们只需要计算每一天的属性情况，最后对于所有的requirements 都在属性列表中进行二分查找（现在只有一种属性了)，就能知道他是在哪一天完成的了。<br>但这道题实际上，每一种属性的满足是互相独立的。<br>简单来说，对于一个剧情要求 (C, R, H) 来说，假设 C 要求是在第 x 天满足的，R要求是在第 y 天满足的，H 要求是在第 z 天满足的。那么该剧情的满足时间为：<br>t=max(x,y,z)</p><p>原始代码：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getTriggerTime(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; increase, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; requirements) &#123;</span><br><span class="line">        <span class="keyword">int</span> res[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> day=increase.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;end(requirements.size(),<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;day;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                res[j]+=increase[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;requirements.size();m++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end[m]!=<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> count1=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;<span class="number">3</span>;n++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(res[n]&gt;=requirements[m][n])</span><br><span class="line">                        count++;</span><br><span class="line">                    <span class="keyword">if</span>(requirements[m][n]==<span class="number">0</span>)</span><br><span class="line">                        count1++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(count1==<span class="number">3</span>)&#123;</span><br><span class="line">                    end[m]=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(count==<span class="number">3</span>)</span><br><span class="line">                    end[m]=i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p><p>改进代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getTriggerTime(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; increase, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; requirements) &#123;</span><br><span class="line"><span class="comment">//将三个属性分开，并初始化为0</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C(increase.size() + <span class="number">1</span>, <span class="number">0</span>);<span class="comment">//初始化</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; R(increase.size() + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; H(increase.size() + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; increase.size(); ++i)<span class="comment">//算和</span></span><br><span class="line">&#123;</span><br><span class="line">C[i + <span class="number">1</span>] = C[i] + increase[i][<span class="number">0</span>];</span><br><span class="line">R[i + <span class="number">1</span>] = R[i] + increase[i][<span class="number">1</span>];</span><br><span class="line">H[i + <span class="number">1</span>] = H[i] + increase[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;<span class="comment">//返回值</span></span><br><span class="line"><span class="keyword">int</span> maxlen = C.size();<span class="comment">//若lower_bound中没找到则返回last，此时求的差是数组长度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; requirements.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//lower_bound 返回大于等于查找元素的位置</span></span><br><span class="line"><span class="keyword">int</span> lbc = lower_bound(C.begin(), C.end(), requirements[i][<span class="number">0</span>]) - C.begin();</span><br><span class="line"><span class="keyword">int</span> lbr = lower_bound(R.begin(), R.end(), requirements[i][<span class="number">1</span>]) - R.begin();</span><br><span class="line"><span class="keyword">int</span> lbh = lower_bound(H.begin(), H.end(), requirements[i][<span class="number">2</span>]) - H.begin();</span><br><span class="line"><span class="keyword">if</span> (lbc == maxlen || lbr == maxlen || lbh == maxlen)<span class="comment">//没触发</span></span><br><span class="line">&#123;</span><br><span class="line">ret.emplace_back(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ret.emplace_back(max(max(lbc, lbr), lbh));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法编程" scheme="https://sunxin18.github.io/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="优化" scheme="https://sunxin18.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>leetcode多函数编程</title>
    <link href="https://sunxin18.github.io/2020/05/15/function/"/>
    <id>https://sunxin18.github.io/2020/05/15/function/</id>
    <published>2020-05-15T02:07:30.000Z</published>
    <updated>2020-05-20T14:09:25.457Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol start="1396"><li>设计地铁系统<br>这道题主要思考点在于容器设计，in容器来记录编号id的人的（上车站点和上车时间）–pair，然后不需要额外用out来记录下车，直接在checkout函数里计算一下id的人上下车时间差做好记录，最后直接求mean就可以啦</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UndergroundSystem</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">using</span> pii = pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, pii&gt; in;</span><br><span class="line">    <span class="built_in">map</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt;, <span class="keyword">int</span>&gt; a, b;</span><br><span class="line">    </span><br><span class="line">    UndergroundSystem() &#123;</span><br><span class="line">        in.clear();</span><br><span class="line">        a.clear();</span><br><span class="line">        b.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">checkIn</span><span class="params">(<span class="keyword">int</span> id, <span class="built_in">string</span> stationName, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        in[id] = &#123;stationName, t&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">checkOut</span><span class="params">(<span class="keyword">int</span> id, <span class="built_in">string</span> stationName, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> [ss, tt] = in[id];</span><br><span class="line">        <span class="keyword">int</span> time = t-tt;</span><br><span class="line">        a[&#123;ss,stationName&#125;] ++;</span><br><span class="line">        b[&#123;ss,stationName&#125;] += time;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getAverageTime</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)b[&#123;s,t&#125;]/a[&#123;s,t&#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法编程" scheme="https://sunxin18.github.io/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="多函数编程" scheme="https://sunxin18.github.io/tags/%E5%A4%9A%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Binary Search</title>
    <link href="https://sunxin18.github.io/2020/05/09/Binary-Search/"/>
    <id>https://sunxin18.github.io/2020/05/09/Binary-Search/</id>
    <published>2020-05-09T12:10:33.000Z</published>
    <updated>2020-05-20T14:26:30.635Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>二分搜索核心思想：把<em>待搜索区间</em>分为<em>有目标元素的区间</em>和<em>不包含目标元素的区间</em>，排除掉<em>不包含目标元素的区间</em>的区间，剩下就是<em>有目标元素的区间</em>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>华为云口罩配送大赛经验分享</title>
    <link href="https://sunxin18.github.io/2020/05/08/huawei/"/>
    <id>https://sunxin18.github.io/2020/05/08/huawei/</id>
    <published>2020-05-08T01:06:27.000Z</published>
    <updated>2020-05-08T08:13:41.249Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>比赛链接：<a href="https://competition.huaweicloud.com/information/1000037176/introduction" target="_blank" rel="noopener">https://competition.huaweicloud.com/information/1000037176/introduction</a></p><h3 id="赛题分析："><a href="#赛题分析：" class="headerlink" title="赛题分析："></a>赛题分析：</h3><ol><li>地图大小为12×12，需求点固定为5个，配送目标是将所有需求点的需求进行满足，配送过程中会随机生成捐赠小区</li><li>纯命令行交互，使用标准I/O作为命令（S/R/G）和移动方向(E/W/S/N)的传递途径</li><li>在1000张地图上测试</li></ol><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>我没有做太多的思考，思路也很容易理解，首先先到的就是greedy策略，每次都选择当前最好的选择，当然这只能考虑到局部最优，但最后结果还不错，能排进前二十。</li><li>每次配送的时候都优先选择离当前最近的需求点配送，取货的时候给每个捐赠小区一个ranking，就按照捐赠数量/距离来做，试了一下距离的平方结果不如绝对值。</li><li>配送有几种情况需要考虑：<ul><li>车上口罩为0，那么肯定要去取货，那么就按ranking来选择</li><li>车上口罩为100，那么肯定要去送货，就选择最近的，因为最远的周边可能后续会生成捐赠小区    </li><li>接下的两种情况最难考虑，就是送完一个小区或者刚取完一些车上还剩，那么是去接着送别的小区，还是取货呢？我的想法就是也写一个ranking比较，送货和取货的价值比较，但要考虑一些特殊情况，如果此时的货够最近的需求小区a那么就去送，如果此时的货加上离aranking最高的取货点足够那么就直接去取货点取货，当然这考虑非常不够，很需要改进,可以学习依一下别的选手的思路。</li></ul></li></ol><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>下面对我的代码进行讲解，用python写的.<br>load:当前装载量<br>target：目标地<br>R(字典)：对应坐标的货量，需求点就是负值，捐赠和仓库就是正值，<em>坐标要用元组，不是列表</em></p><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><h5 id="需求小区仓库初始化"><a href="#需求小区仓库初始化" class="headerlink" title="需求小区仓库初始化"></a>需求小区仓库初始化</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    new_string=input()</span><br><span class="line">    s_list=new_string.split()</span><br><span class="line">    S=(int(s_list[<span class="number">1</span>]),int(s_list[<span class="number">2</span>]))</span><br><span class="line">    R=&#123;&#125;</span><br><span class="line">    R[(int(s_list[<span class="number">1</span>]),int(s_list[<span class="number">2</span>]))]=<span class="number">100</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">        new_string=input()</span><br><span class="line">        r_list=new_string.split()</span><br><span class="line">        R[(int(r_list[<span class="number">1</span>]),int(r_list[<span class="number">2</span>]))]=int(r_list[<span class="number">3</span>])</span><br><span class="line">    p=list(S)</span><br><span class="line">    load=<span class="number">0</span>             <span class="comment">#初始化装载量为0</span></span><br><span class="line">    target=S</span><br></pre></td></tr></table></figure></div><h5 id="选择（每次到达小区或者捐赠点就行下一步的选择"><a href="#选择（每次到达小区或者捐赠点就行下一步的选择" class="headerlink" title="选择（每次到达小区或者捐赠点就行下一步的选择)"></a>选择（每次到达小区或者捐赠点就行下一步的选择)</h5><p>这里我加入了一个配送时如果有顺路的捐赠小区，那就去取一下<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        P=tuple(p)</span><br><span class="line">        <span class="keyword">if</span> P == S:</span><br><span class="line">            load = <span class="number">100</span></span><br><span class="line">            target = choose_na_target(p)</span><br><span class="line">        <span class="keyword">elif</span> P <span class="keyword">in</span> R.keys():</span><br><span class="line">            sum=load+R[P]</span><br><span class="line">            <span class="keyword">if</span> R[P] &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> sum&lt;<span class="number">0</span>:</span><br><span class="line">                    load=<span class="number">0</span></span><br><span class="line">                    R[P]=sum</span><br><span class="line">                    <span class="keyword">if</span> R[closest(p)] &gt;= -R[P]:</span><br><span class="line">                        target = closest(p)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        target= choose_target(p)        <span class="comment">#车空就去送取货</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">del</span> R[P]</span><br><span class="line">                    <span class="keyword">if</span> len(R)==<span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> min(R.values())&gt;<span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    load=sum</span><br><span class="line">                    target1 = choose_na_target(p)</span><br><span class="line">                    target2 = choose_target(p)</span><br><span class="line">                    target3 = choose_target(target1)</span><br><span class="line">                    <span class="keyword">if</span> load &gt;= -R[target1]: </span><br><span class="line">                        target = target1</span><br><span class="line">                    <span class="keyword">elif</span> load + R[target3] &gt;= -R[target1]:</span><br><span class="line">                        target = target3</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        target =  com_value(p ,target1,target2)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> sum &gt; <span class="number">100</span>:</span><br><span class="line">                    load=<span class="number">100</span></span><br><span class="line">                    R[P]=sum<span class="number">-100</span></span><br><span class="line">                    target = choose_na_target(p)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">del</span> R[P]</span><br><span class="line">                    load=sum</span><br><span class="line">                    target1 = choose_na_target(p)</span><br><span class="line">                    target2 = choose_target(p)</span><br><span class="line">                    <span class="keyword">if</span> load &gt;= -R[target1]: </span><br><span class="line">                        target = target1</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        target =  com_value(p ,target1,target2)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> R.keys():<span class="comment">#顺路就去取</span></span><br><span class="line">                <span class="keyword">if</span> R[k] &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span>(k[<span class="number">0</span>]&gt;=target[<span class="number">0</span>] <span class="keyword">and</span>  k[<span class="number">0</span>]&lt;=p[<span class="number">0</span>]) <span class="keyword">or</span> (k[<span class="number">0</span>]&lt;=target[<span class="number">0</span>] <span class="keyword">and</span>  k[<span class="number">0</span>]&gt;=p[<span class="number">0</span>]):</span><br><span class="line">                        <span class="keyword">if</span>(k[<span class="number">1</span>]&gt;=target[<span class="number">1</span>] <span class="keyword">and</span>  k[<span class="number">1</span>]&lt;=p[<span class="number">1</span>]) <span class="keyword">or</span> (k[<span class="number">1</span>]&lt;=target[<span class="number">1</span>] <span class="keyword">and</span>  k[<span class="number">1</span>]&gt;=p[<span class="number">1</span>]):</span><br><span class="line">                            target = k</span><br></pre></td></tr></table></figure></div></p><h5 id="读取命令行输入"><a href="#读取命令行输入" class="headerlink" title="读取命令行输入"></a>读取命令行输入</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">new_string=input()</span><br><span class="line">        <span class="keyword">if</span> new_string==<span class="string">'G'</span>:          <span class="comment">#读取到行动的命令，向target移动</span></span><br><span class="line">            p,next_step=step(p,target)</span><br><span class="line">            print(next_step)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r_list=new_string.split()</span><br><span class="line">            <span class="keyword">if</span> p[<span class="number">0</span>] == int(r_list[<span class="number">1</span>]) <span class="keyword">and</span> p[<span class="number">1</span>] == int(r_list[<span class="number">2</span>]):                   <span class="comment">#空投贴脸hhh</span></span><br><span class="line">                <span class="keyword">if</span> load + int(r_list[<span class="number">3</span>]) &lt;= <span class="number">100</span>:</span><br><span class="line">                    load = load + int(r_list[<span class="number">3</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    R[(int(r_list[<span class="number">1</span>]),int(r_list[<span class="number">2</span>]))]=int(r_list[<span class="number">3</span>])<span class="number">-100</span>+load</span><br><span class="line">                    load = <span class="number">100</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                R[(int(r_list[<span class="number">1</span>]),int(r_list[<span class="number">2</span>]))]=int(r_list[<span class="number">3</span>])           <span class="comment">#更新一下选择</span></span><br><span class="line">                <span class="keyword">if</span>  R[target] &gt; <span class="number">0</span>:     <span class="comment">#注意R里没有S</span></span><br><span class="line">                    target = choose_target(p)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cur_target = (int(r_list[<span class="number">1</span>]),int(r_list[<span class="number">2</span>]))</span><br><span class="line">                    target = com_value(p ,target,cur_target)</span><br></pre></td></tr></table></figure></div><h5 id="移动函数"><a href="#移动函数" class="headerlink" title="移动函数"></a>移动函数</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">step</span><span class="params">(pos,to)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> pos[<span class="number">0</span>]&lt;to[<span class="number">0</span>]:</span><br><span class="line">        pos[<span class="number">0</span>]=pos[<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> pos,<span class="string">'S'</span></span><br><span class="line">    <span class="keyword">elif</span> pos[<span class="number">0</span>]&gt;to[<span class="number">0</span>]:</span><br><span class="line">        pos[<span class="number">0</span>]=pos[<span class="number">0</span>]<span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> pos,<span class="string">'N'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> pos[<span class="number">1</span>]&lt;to[<span class="number">1</span>]:</span><br><span class="line">            pos[<span class="number">1</span>]=pos[<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> pos,<span class="string">'E'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pos[<span class="number">1</span>]=pos[<span class="number">1</span>]<span class="number">-1</span></span><br><span class="line">            <span class="keyword">return</span> pos,<span class="string">'W'</span></span><br></pre></td></tr></table></figure></div><h5 id="选择捐赠小区和需求小区"><a href="#选择捐赠小区和需求小区" class="headerlink" title="选择捐赠小区和需求小区"></a>选择捐赠小区和需求小区</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_na_target</span><span class="params">(pos)</span>:</span></span><br><span class="line">    na_distance=<span class="number">0</span></span><br><span class="line">    <span class="keyword">global</span> load</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> R.keys():</span><br><span class="line">        <span class="keyword">if</span> R[k] &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> k[<span class="number">0</span>]==pos[<span class="number">0</span>] <span class="keyword">and</span> k[<span class="number">1</span>]==pos[<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            cur_dis2 = <span class="number">1</span>/ (abs(pos[<span class="number">0</span>]-k[<span class="number">0</span>])+abs(pos[<span class="number">1</span>]-k[<span class="number">1</span>])+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> cur_dis2 &gt; na_distance:</span><br><span class="line">                na_distance = cur_dis2</span><br><span class="line">                tar = k</span><br><span class="line">    <span class="keyword">return</span> tar</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_target</span><span class="params">(pos)</span>:</span></span><br><span class="line">    po_distance=<span class="number">0</span></span><br><span class="line">    <span class="keyword">global</span> load</span><br><span class="line">    distance = (<span class="number">100</span>-load)/ (abs(pos[<span class="number">0</span>]-S[<span class="number">0</span>])+abs(pos[<span class="number">1</span>]-S[<span class="number">1</span>])+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> R.keys():</span><br><span class="line">        <span class="keyword">if</span> R[k] &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> k[<span class="number">0</span>]==pos[<span class="number">0</span>] <span class="keyword">and</span> k[<span class="number">1</span>]==pos[<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> R[k] + load &gt; <span class="number">100</span>:</span><br><span class="line">                cur_dis1 = (<span class="number">100</span>-load)/ (abs(pos[<span class="number">0</span>]-k[<span class="number">0</span>])+abs(pos[<span class="number">1</span>]-k[<span class="number">1</span>])+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur_dis1 = R[k] / (abs(pos[<span class="number">0</span>] - k[<span class="number">0</span>]) + abs(pos[<span class="number">1</span>] - k[<span class="number">1</span>])+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> cur_dis1 &gt; po_distance:</span><br><span class="line">                po_distance = cur_dis1</span><br><span class="line">                tar =k   </span><br><span class="line">    <span class="keyword">if</span>  po_distance&gt; distance:</span><br><span class="line">        <span class="keyword">return</span> tar </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> S</span><br></pre></td></tr></table></figure></div><h5 id="捐赠小区和需求小区的比较ranking"><a href="#捐赠小区和需求小区的比较ranking" class="headerlink" title="捐赠小区和需求小区的比较ranking"></a>捐赠小区和需求小区的比较ranking</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">com_value</span><span class="params">(pos,target1,target2)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    <span class="keyword">if</span> load &lt; -R[target1]:</span><br><span class="line">        cur_value1 = load</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        cur_value1 = -R[target1]</span><br><span class="line">    value1 = cur_value1 / (abs(pos[<span class="number">0</span>]-target1[<span class="number">0</span>])+abs(pos[<span class="number">1</span>]-target1[<span class="number">1</span>])+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> load +R[target2] &gt; <span class="number">100</span>:</span><br><span class="line">        cur_value2 = <span class="number">100</span> -load</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        cur_value2 = R[target2]</span><br><span class="line">    value2 = cur_value2 / (abs(pos[<span class="number">0</span>]-target2[<span class="number">0</span>])+abs(pos[<span class="number">1</span>]-target2[<span class="number">1</span>])+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> value1 &gt;value2:</span><br><span class="line">        <span class="keyword">return</span> target1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> target2</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="比赛" scheme="https://sunxin18.github.io/tags/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>换新电脑hexo博客的迁移</title>
    <link href="https://sunxin18.github.io/2020/04/29/blog-trsf/"/>
    <id>https://sunxin18.github.io/2020/04/29/blog-trsf/</id>
    <published>2020-04-29T12:14:36.000Z</published>
    <updated>2020-04-30T02:31:42.148Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、拷贝原始电脑blog文件夹到新电脑"><a href="#一、拷贝原始电脑blog文件夹到新电脑" class="headerlink" title="一、拷贝原始电脑blog文件夹到新电脑"></a>一、拷贝原始电脑blog文件夹到新电脑</h2><h2 id="二、安装git、node-js"><a href="#二、安装git、node-js" class="headerlink" title="二、安装git、node.js"></a>二、安装git、node.js</h2><h2 id="三、安装-hexo"><a href="#三、安装-hexo" class="headerlink" title="三、安装 hexo"></a>三、安装 hexo</h2><p>在 cmd 下输入下面指令安装 hexo<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><figcaption><span>install hexo-cli -g```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 四、在blog文件夹下执行git bash，输入以下命令</span><br><span class="line">```npm install</span><br><span class="line">npm install hexo-deployer-git --save  // 文章部署到 git 的模块</span><br><span class="line">（下面为选择安装）</span><br><span class="line">npm install hexo-generator-feed --save  // 建立 RSS 订阅</span><br><span class="line">npm install hexo-generator-sitemap --save // 建立站点地图</span><br></pre></td></tr></table></figure></div></p><h2 id="五、创建ssh"><a href="#五、创建ssh" class="headerlink" title="五、创建ssh"></a>五、创建ssh</h2><h3 id="（1）打开git-bash，在用户主目录下运行：ssh-keygen-t-rsa-C-“你的邮箱”-把其中的邮件地址换成自己的邮件地址，然后一路回车"><a href="#（1）打开git-bash，在用户主目录下运行：ssh-keygen-t-rsa-C-“你的邮箱”-把其中的邮件地址换成自己的邮件地址，然后一路回车" class="headerlink" title="（1）打开git bash，在用户主目录下运行：ssh-keygen -t rsa -C “你的邮箱” 把其中的邮件地址换成自己的邮件地址，然后一路回车"></a>（1）打开git bash，在用户主目录下运行：ssh-keygen -t rsa -C “你的邮箱” 把其中的邮件地址换成自己的邮件地址，然后一路回车</h3><h3 id="（2）最后完成后，会在用户主目录下生成-ssh目录，里面有id-rsa和id-rsa-pub两个文件，这两个就是SSH-key密钥对，id-rsa是私钥，千万不能泄露出去，id-rsa-pub是公钥，可以放心地告诉任何人。"><a href="#（2）最后完成后，会在用户主目录下生成-ssh目录，里面有id-rsa和id-rsa-pub两个文件，这两个就是SSH-key密钥对，id-rsa是私钥，千万不能泄露出去，id-rsa-pub是公钥，可以放心地告诉任何人。" class="headerlink" title="（2）最后完成后，会在用户主目录下生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH key密钥对，id_rsa是私钥，千万不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。"></a>（2）最后完成后，会在用户主目录下生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH key密钥对，id_rsa是私钥，千万不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</h3><h3 id="（3）登陆GitHub，打开「Settings」-gt-「SSH-and-GPG-keys」，然后点击「new-SSH-key」，填上任意Title，在Key文本框里粘贴公钥id-rsa-pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add-SSH-Key」，你就应该看到已经添加的Key。"><a href="#（3）登陆GitHub，打开「Settings」-gt-「SSH-and-GPG-keys」，然后点击「new-SSH-key」，填上任意Title，在Key文本框里粘贴公钥id-rsa-pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add-SSH-Key」，你就应该看到已经添加的Key。" class="headerlink" title="（3）登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add SSH Key」，你就应该看到已经添加的Key。"></a>（3）登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add SSH Key」，你就应该看到已经添加的Key。</h3><p><strong>注意：不要在git版本库中运行ssh，然后又将它提交，这样就把密码泄露出去了。</strong></p><h2 id="六、部署可能出现的问题"><a href="#六、部署可能出现的问题" class="headerlink" title="六、部署可能出现的问题"></a>六、部署可能出现的问题</h2><p>git上传包提交时出现：Please tell me who you are.<br><a href="/2020/04/29/blog-trsf/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/29/blog-trsf/1.png" alt title></a><br>解决方法：执行<br>git config –global user.email “你的邮箱<br>git config –global user.name “gihub用户名”</p><p>之后就可以正常使用啦</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="博客维护" scheme="https://sunxin18.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4/"/>
    
    
      <category term="博客" scheme="https://sunxin18.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunxin18.github.io/2020/04/29/knn/"/>
    <id>https://sunxin18.github.io/2020/04/29/knn/</id>
    <published>2020-04-29T11:50:27.365Z</published>
    <updated>2020-05-18T03:36:33.117Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>title: knn应用（癌症判断）<br>date: 2020-02-03 15:54:50<br>categories: 机器学习<br>tags: [KNN,应用，参数]<br>cover: /img/me.jpg</p><h2 id="KNN简介"><a href="#KNN简介" class="headerlink" title="KNN简介"></a>KNN简介</h2><p>KNN算法的思想总结一下：就是在训练集中数据和标签已知的情况下，输入测试数据，将测试数据的特征与训练集中对应的特征进行相互比较，找到训练集中与之最为相似的前K个数据，则该测试数据对应的类别就是K个数据中出现次数最多的那个分类，其算法的描述为：</p><p>1）计算测试数据与各个训练数据之间的距离；</p><p>2）按照距离的递增关系进行排序；</p><p>3）选取距离最小的K个点；</p><p>4）确定前K个点所在类别的出现频率；</p><p>5）返回前K个点中出现频率最高的类别作为测试数据的预测分类。</p><p><strong>距离矩阵和k都是超参数</strong></p><h3 id="参数与超参数"><a href="#参数与超参数" class="headerlink" title="参数与超参数"></a>参数与超参数</h3><ol><li><p>参数(parameters)/模型参数<br>　由模型通过学习得到的变量，比如权重和偏置</p></li><li><p>超参数(hyperparameters)/算法参数<br>根据经验进行设定，影响到权重和偏置的大小，比如迭代次数、隐藏层的层数、每层神经元的个数、学习速率等</p></li></ol><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>属性信息：</p><ol><li>Sample code number: id number </li><li>Clump Thickness: 1 - 10 </li><li>Uniformity of Cell Size: 1 - 10 </li><li>Uniformity of Cell Shape: 1 - 10 </li><li>Marginal Adhesion: 1 - 10 </li><li>Single Epithelial Cell Size: 1 - 10 </li><li>Bare Nuclei: 1 - 10 </li><li>Bland Chromatin: 1 - 10 </li><li>Normal Nucleoli: 1 - 10 </li><li>Mitoses: 1 - 10 </li><li>Class: (2 for benign, 4 for malignant)（2为良性，4为恶性）</li></ol><p>为数据添加label，在第一行加入id,clump_thickness,uniform_cell_size,<br>uniform_cell_shape,marginal_adhesion,<br>single_epi_cell_size,bare_nuclei,bland_chromation,<br>normal_nucleoli,mitoses,class</p><p>数据样式：<br>   clumb_thickness  unif_cell_size  unif_cell_shape  marg_adhesion  single_epith_cell_size bare_nuclei  bland_chrom  norm_nucleoli  mitoses  class<br>0                5               1                1              1                       2           1            3              1        1      2<br>1                5               4                4              5                       7          10            3              2        1      2<br>2                3               1                1              1                       2           2            3              1        1      2<br>3                6               8                8              1                       3           4            3              7        1      2<br>4                4               1                1              3                       2           1            3              1        1      2</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing ,model_selection,neighbors</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'breast-cancer-wisconsin.txt'</span>)<span class="comment">#encoding='utf-8',header=None,sep = '\t'</span></span><br><span class="line">df.replace(<span class="string">'?'</span>,<span class="number">-99999</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment">#print([column for column in df])</span></span><br><span class="line">df.drop([<span class="string">'id'</span>], <span class="number">1</span>, inplace=<span class="keyword">True</span>)  <span class="comment">#df.drop returns a new dataframe with our chosen column(s) dropped.</span></span><br><span class="line"><span class="comment">#df=df.iloc[:,1:]#.iloc使用全是以0开头的行号和列号，不能直接用其它索引哦。而.loc使用的实际设置的索引和列名。 这就是.loc和.iloc的区别。在实际运用中，我还发现一点区别，.iloc只能选取数据表里实际有的行和列，而.loc可以选取没有的行和列，赋值后就可以添加新行或者列。</span></span><br><span class="line">X = np.array(df.drop([<span class="string">'class'</span>],<span class="number">1</span>))</span><br><span class="line">y = np.array(df[<span class="string">'class'</span>])</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print([column for column in df])</span></span><br><span class="line"><span class="comment">#clf = LinearRegression(n_jobs=-1)#SVM.svr() kernel='poly'</span></span><br><span class="line">clf = neighbors.KNeighborsClassifier()</span><br><span class="line">clf.fit(X_train,y_train)</span><br><span class="line"></span><br><span class="line">accuracy = clf.score(X_test,y_test)</span><br><span class="line">print(accuracy)</span><br><span class="line">print(df.head())</span><br><span class="line"></span><br><span class="line"><span class="comment">#example_measures = np.array([4,2,1,1,1,2,3,2,1])  #一个sample</span></span><br><span class="line"><span class="comment">#example_measures = example_measures.reshape(1, -1)  #Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample</span></span><br><span class="line">example_measures = np.array([[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]])<span class="comment">#测试用例</span></span><br><span class="line">example_measures = example_measures.reshape(len(example_measures), <span class="number">-1</span>)</span><br><span class="line">prediction = clf.predict(example_measures)</span><br><span class="line"></span><br><span class="line">print(prediction)</span><br></pre></td></tr></table></figure></div><p>accuracy:0.9714285714285714<br>预测结果：prediction[2 2]  两个都为良性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>并行矩阵求逆</title>
    <link href="https://sunxin18.github.io/2020/04/25/parallow/"/>
    <id>https://sunxin18.github.io/2020/04/25/parallow/</id>
    <published>2020-04-25T01:56:10.000Z</published>
    <updated>2020-05-03T12:12:36.464Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h3 id="parallel"><a href="#parallel" class="headerlink" title="parallel　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"></a>parallel　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</h3><p>parallel表示其后语句将被多个线程并行执行，“#pragma omp parallel”后面的语句（或者，语句块）被称为parallel region。<br>多个线程的执行顺序是不能保证的。</p><h3 id="for"><a href="#for" class="headerlink" title="for　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"></a>for　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</h3><p>我们一般是对一个计算量庞大的任务进行划分，让多个线程分别执行计算任务的某一部分，从而达到缩短计算时间的目的。这里的关键是，每个线程执行的计算互不相同（操作的数据不同或者计算任务本身不同），多个线程协作完成所有计算。</p><p>OpenMP for指示将C++ for循环的多次迭代划分给多个线程（划分指，每个线程执行的迭代互不重复，所有线程的迭代并起来正好是C++ for循环的所有迭代），这里C++ for循环需要一些限制从而能在执行C++ for之前确定循环次数，例如C++ for中不应含有break等。</p><h3 id="测试下电脑是几核的-几线程"><a href="#测试下电脑是几核的-几线程" class="headerlink" title="测试下电脑是几核的(几线程)"></a>测试下电脑是几核的(几线程)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;omp.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"parallel begin:\n"</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> omp parallel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; omp_get_thread_num();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n parallel end.\n"</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.get();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="/2020/04/25/parallow/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/25/parallow/1.png" alt title></a></p><p>参考文献：<a href="https://blog.csdn.net/laobai1015/article/details/79020128" target="_blank" rel="noopener">https://blog.csdn.net/laobai1015/article/details/79020128</a></p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>矩阵求逆大致有三个方法，待定系数法、伴随矩阵求逆矩阵，初等变换求逆矩阵。而待定系数法和伴随矩阵对维数大很难计算了，而初等变化法有着清晰的过程，比较容易用编程语言表达，并且遍历矩阵去操作归一化清零等过程可以很容易实现并行化，不同线程的操作是针对不同行和列也不会产生冲突导致错误。<br><a href="/2020/04/25/parallow/2.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/25/parallow/2.png" alt title></a></p><h3 id="实现方案："><a href="#实现方案：" class="headerlink" title="实现方案："></a>实现方案：</h3><p>使用高斯消元法，用二维vector来存储矩阵，方便实现矩阵维度的变化以及遍历，将可并行化的循环加上#pragma omp parallel for实现并行化。</p><h3 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h3><p><a href="/2020/04/25/parallow/3.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/25/parallow/3.png" alt title></a></p><h3 id="运行加速比和正确性验证"><a href="#运行加速比和正确性验证" class="headerlink" title="运行加速比和正确性验证"></a>运行加速比和正确性验证</h3><p><a href="/2020/04/25/parallow/4.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/25/parallow/4.png" alt title></a><br><a href="/2020/04/25/parallow/5.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/25/parallow/5.png" alt title></a></p><p>代码基于c++和openmp编写，需要代码邮件call我~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="并行计算" scheme="https://sunxin18.github.io/categories/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="openmp" scheme="https://sunxin18.github.io/tags/openmp/"/>
    
  </entry>
  
  <entry>
    <title>pachong</title>
    <link href="https://sunxin18.github.io/2020/04/21/pachong/"/>
    <id>https://sunxin18.github.io/2020/04/21/pachong/</id>
    <published>2020-04-21T02:35:50.000Z</published>
    <updated>2020-04-21T02:35:52.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pytorch</title>
    <link href="https://sunxin18.github.io/2020/04/16/pytorch/"/>
    <id>https://sunxin18.github.io/2020/04/16/pytorch/</id>
    <published>2020-04-16T02:54:43.000Z</published>
    <updated>2020-05-20T11:04:45.372Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>深度学习有许多应用，这些应用往往包括以某种形式获取数据（例如图像或文本），并以另一种形式生成数据（例如标签，数字或更多文本）。从这个角度来看，深度学习包括构建一个将数据从一种表示转换为另一种表示的系统。<br>从一种数据形式到另一种数据形式的转换通常是由深度神经网络分层次学习的，这意味着我们可以将层次之间转换得到的数据视为一系列中间表示（intermediate representation）。以图像识别为例，浅层的表示可以是特征（例如边缘检测）或纹理（例如毛发），较深层次的表征可以捕获更复杂的结构（例如耳朵、鼻子或眼睛）。</p><h3 id="张量（tensor）"><a href="#张量（tensor）" class="headerlink" title="张量（tensor）"></a>张量（tensor）</h3><p>对于来自数学、物理学或工程学的人来说，张量一词是与空间、参考系以及它们之间的转换的概念是捆绑在一起的。对于其他人来说，张量是指将向量（vector）和矩阵（matrix）推广到任意维度，。与张量相同概念的另一个名称是多维数组（multidimensional array）。张量的维数与用来索引张量中某个标量值的索引数一致。<br><a href="/2020/04/16/pytorch/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/16/pytorch/1.png" alt title></a></p><h4 id="张量的优点"><a href="#张量的优点" class="headerlink" title="张量的优点"></a>张量的优点</h4><p>Python列表或数字元组（tuple）是在内存中单独分配的Python对象的集合，如图2.3左侧所示。然而，PyTorch张量或NumPy数组（通常）是连续内存块上的视图（view），这些内存块存有未封装（unboxed）的C数值类型，在本例中，如图2.3右侧所示，就是32位的浮点数（4字节），而不是Python对象。因此，包含100万个浮点数的一维张量需要400万个连续字节存储空间，再加上存放元数据（尺寸、数据类型等）的少量开销。<br><a href="/2020/04/16/pytorch/2.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/04/16/pytorch/2.png" alt title></a><br>比如可以用zeros或ones来初始化张量，同时用元组指定大小<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">points = torch.zeros(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">points</span><br></pre></td></tr></table></figure></div></p><p>输出：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tensor([[<span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>]])</span><br></pre></td></tr></table></figure></div></p><p>函数名后面带下划线_ 的函数会修改Tensor本身，例如，x.add_(y)和x.t_()会改变 x，但x.add(y)和x.t()返回一个新的Tensor， 而x不变。<br>Tensor和numpy对象共享内存，所以他们之间的转换很快，而且几乎不会消耗什么资源。但这也意味着，如果其中一个变了，另外一个也会随之改变。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="深度学习" scheme="https://sunxin18.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="pytorch" scheme="https://sunxin18.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>trie</title>
    <link href="https://sunxin18.github.io/2020/03/28/trie/"/>
    <id>https://sunxin18.github.io/2020/03/28/trie/</id>
    <published>2020-03-28T05:11:50.000Z</published>
    <updated>2020-03-28T05:15:30.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumLengthEncoding</span><span class="params">(self, words)</span>:</span></span><br><span class="line">        res=set(words)</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,len(word)):</span><br><span class="line">                res.discard(word[k:])</span><br><span class="line">        <span class="keyword">return</span> sum(len(word) + <span class="number">1</span> <span class="keyword">for</span> word <span class="keyword">in</span> res)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kmeans</title>
    <link href="https://sunxin18.github.io/2020/03/25/kmeans/"/>
    <id>https://sunxin18.github.io/2020/03/25/kmeans/</id>
    <published>2020-03-25T14:39:27.000Z</published>
    <updated>2020-03-27T14:59:20.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>k-means algorithm算法是一个聚类算法，把n的对象根据他们的属性分为k个分割，k &lt; n。假设对象属性来自于空间向量，并且目标是使各个群组内部的均方误差总和最小。通过迭代的方式将样本分到K个簇。</p><h1 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h1><ol><li>选取K个点做为初始聚集的簇心（也可选择非样本点）;</li><li>分别计算每个样本点到 K个簇核心的距离（这里的距离一般取欧氏距离或余弦距离），找到离该点最近的簇核心，将它归属到对应的簇；</li><li>所有点都归属到簇之后， M个点就分为了 K个簇。之后重新计算每个簇的重心（平均距离中心），将其定为新的“簇核心”；<br>反复迭代 2 - 3 步骤，直到达到某个中止条件</li></ol><h1 id="sklearn实现"><a href="#sklearn实现" class="headerlink" title="sklearn实现"></a>sklearn实现</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"></span><br><span class="line"><span class="comment">#产生数据</span></span><br><span class="line">k=<span class="number">4</span></span><br><span class="line">X,Y = make_blobs(n_samples=<span class="number">100</span>, n_features=<span class="number">2</span>, centers=k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#构建模型</span></span><br><span class="line">km = KMeans(n_clusters=k, init=<span class="string">'k-means++'</span>, max_iter=<span class="number">300</span>)</span><br><span class="line">km.fit(X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取簇心</span></span><br><span class="line">centroids = km.cluster_centers_</span><br><span class="line"><span class="comment"># 获取归集后的样本所属簇对应值</span></span><br><span class="line">y_kmean = km.predict(X)</span><br><span class="line">print(y_kmean)</span><br><span class="line"><span class="comment"># 呈现未归集前的数据</span></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], s=<span class="number">50</span>)</span><br><span class="line">plt.yticks(())</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y_kmean, s=<span class="number">50</span>, cmap=<span class="string">'viridis'</span>)</span><br><span class="line">plt.scatter(centroids[:, <span class="number">0</span>], centroids[:, <span class="number">1</span>], c=<span class="string">'black'</span>, s=<span class="number">100</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><a href="/2020/03/25/kmeans/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/03/25/kmeans/1.png" alt title></a><br><a href="/2020/03/25/kmeans/2.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/03/25/kmeans/2.png" alt title></a></p><h1 id="手工实现"><a href="#手工实现" class="headerlink" title="手工实现"></a>手工实现</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> spatial</span><br><span class="line"></span><br><span class="line"><span class="comment">#产生数据</span></span><br><span class="line">k=<span class="number">4</span></span><br><span class="line">X,Y = make_blobs(n_samples=<span class="number">100</span>, n_features=<span class="number">2</span>, centers=k)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcuDistance</span><span class="params">(vec1, vec2)</span>:</span></span><br><span class="line">    <span class="comment"># 步骤1：定义欧式距离的公式</span></span><br><span class="line">    <span class="comment"># 计算两个向量之间的欧式距离：根号下[(x_1-x_2)^2+(y_1-y_2)^2+...+(x_n-y_n)^2]</span></span><br><span class="line">    <span class="comment"># ver1 - ver2：表示两个向量的对应元素相减</span></span><br><span class="line">    <span class="keyword">return</span> np.sqrt(np.sum(np.square(vec1 - vec2)))  <span class="comment">#注意这里的减号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">k_means</span><span class="params">(data,k,Y)</span>:</span></span><br><span class="line">    m, n = data.shape <span class="comment"># m：样本数量，n：每个样本的属性值个数</span></span><br><span class="line">    cores = data[np.random.choice(np.arange(m), k, replace=<span class="keyword">False</span>)] <span class="comment"># 从m个数据样本中不重复地随机选择k个样本作为质心</span></span><br><span class="line">    print(cores)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>: <span class="comment"># 迭代计算</span></span><br><span class="line">        <span class="comment">#d = np.square(np.repeat(data, k, axis=0).reshape(m, k, n) - cores)</span></span><br><span class="line">        <span class="comment">#distance = np.sqrt(np.sum(d, axis=2)) # ndarray(m, k)，每个样本距离k个质心的距离，共有m行</span></span><br><span class="line">        distance = spatial.distance.cdist(data, cores,metric=<span class="string">'euclidean'</span>)</span><br><span class="line">        index_min = np.argmin(distance, axis=<span class="number">1</span>) <span class="comment"># 每个样本距离最近的质心索引序号</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (index_min == Y).all(): <span class="comment"># 如果样本聚类没有改变</span></span><br><span class="line">            <span class="keyword">return</span> Y, cores <span class="comment"># 则返回聚类结果和质心数据</span></span><br><span class="line">        </span><br><span class="line">        Y[:] = index_min <span class="comment"># 重新分类</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k): <span class="comment"># 遍历质心集</span></span><br><span class="line">            items = Y==i <span class="comment"># 找出对应当前质心的子样本集 ，对应的items为[True,false......]</span></span><br><span class="line">            cores[i] = np.mean(data[items], axis=<span class="number">0</span>) <span class="comment"># 以子样本集的均值作为当前质心的位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">result,cores=k_means(X,k,Y)</span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], s=<span class="number">50</span>)</span><br><span class="line">plt.yticks(())</span><br><span class="line">plt.show()</span><br><span class="line">print(Y)</span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=Y, s=<span class="number">50</span>, cmap=<span class="string">'viridis'</span>)</span><br><span class="line">plt.scatter(cores[:, <span class="number">0</span>], cores[:, <span class="number">1</span>], c=<span class="string">'black'</span>, s=<span class="number">100</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><h1 id="k-means的改进"><a href="#k-means的改进" class="headerlink" title="k-means的改进"></a>k-means的改进</h1><p>k-means改进的一个路线就是尽可能加快收敛速度，这个方向有几个思路：<br>1.质心初始化：选择初始质心之间有一些策略比如尽量远离，有助于反应数据的分布，加快收敛。<br>2.改进k-means的迭代过程，有几个方向，一个改进复杂度，比如数据的访问用KD树来索引，一个是改进目标函数（原始目标函数就是使同一类的离质心距离最小），有一个思路是时刻更新质心，比如移动一个样本到最近的类别，就立刻更新相应的两个类质心，这样改变了每轮都要对所有样本更新label的繁琐过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="机器学习" scheme="https://sunxin18.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="K-means" scheme="https://sunxin18.github.io/tags/K-means/"/>
    
  </entry>
  
  <entry>
    <title>es</title>
    <link href="https://sunxin18.github.io/2020/03/23/es/"/>
    <id>https://sunxin18.github.io/2020/03/23/es/</id>
    <published>2020-03-23T12:29:56.000Z</published>
    <updated>2020-03-26T14:15:54.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>开启外网访问的方法：对elasticsearch.yml文件修改下面参数<br>transport.host: localhost<br>network.host: 192.168.3.5</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>list</title>
    <link href="https://sunxin18.github.io/2020/03/20/list/"/>
    <id>https://sunxin18.github.io/2020/03/20/list/</id>
    <published>2020-03-20T11:57:33.000Z</published>
    <updated>2020-04-09T08:25:58.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol start="203"><li>移除链表元素<br>一道简单题卡了很久….太长时间不做链表果然忘记太多，下面总结一下几点错误</li><li>leetcode的链表都没有头节点，head指针直接指向第一个元素，所以如果想要删除第一个的元素的话需要自己建立一个头节点</li><li>开始代码写得是return head，如果第一个元素被删除了，那么head后面的指向就断掉了</li><li>最开始循环里是这么写的<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span>(p-&gt;next-&gt;val==val)&#123;</span><br><span class="line">    p-&gt;next=p-&gt;next-&gt;next;</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p>这样的话删除后就会跳过一个元素了。<br>下面代码，<br><strong>常规</strong><br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">         ListNode*q = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">         q-&gt;next = head;</span><br><span class="line">        ListNode*p = q;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;next-&gt;val==val)</span><br><span class="line">                p-&gt;next=p-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p><p><strong>递归</strong><br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        head-&gt;next = removeElements(head-&gt;next, val);</span><br><span class="line">        <span class="keyword">return</span> head-&gt;val == val ? head-&gt;next : head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法编程" scheme="https://sunxin18.github.io/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="链表" scheme="https://sunxin18.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>python编程(持续更新)</title>
    <link href="https://sunxin18.github.io/2020/03/14/python/"/>
    <id>https://sunxin18.github.io/2020/03/14/python/</id>
    <published>2020-03-14T02:53:38.000Z</published>
    <updated>2020-03-18T02:57:12.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://blog.csdn.net/ImwaterP/article/details/96282230" target="_blank" rel="noopener">https://blog.csdn.net/ImwaterP/article/details/96282230</a></p><h1 id="argmin"><a href="#argmin" class="headerlink" title="argmin"></a>argmin</h1><p>该函数主要用来检索数组中最小值的位置，并返回其下标值。同理，argmax()函数就是用来检索最大值的下标<br>在没有指定axis值的情况下，默认为None。在默认情况下，就相当于将n维的arry平铺在一起。举个简单的例子，当二维arry（[1,2,3],[4,5,6]）平铺开来就是（[1,2,3,4,5,6]）。<br>当axis = 1时，按照方向来，对于[2,5,6]来说最小值的下标是0，对于[7,6,1]来说最小值的下标是2。所以，最后输出的值就是[0,2]。<br>当axis = 0时，这时按照方向来，[2,7],[5,6],[6,1]分别在一个轴上，所以检索每个轴上的最小值，并返回下标，最后就可以得到输出值[0,0,1]。</p><h1 id="关于切片"><a href="#关于切片" class="headerlink" title="关于切片"></a>关于切片</h1><p>在list里面，只存在元素，不存在元素中的元素；list里元素就是最小的成分，不可以再切片。numpy 的array可以切片<br>例如<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=np.array([[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">7</span>]])</span><br><span class="line">print(a[<span class="number">2</span>]) print(a[<span class="number">2</span>,:])都可以</span><br><span class="line">a=[[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">7</span>]]</span><br><span class="line">print(a[<span class="number">2</span>,:])会报错</span><br></pre></td></tr></table></figure></div></p><h1 id="scipy-spatial-distance-cdist"><a href="#scipy-spatial-distance-cdist" class="headerlink" title="scipy.spatial.distance.cdist"></a>scipy.spatial.distance.cdist</h1><p>该函数用于计算两个输入集合的距离，通过metric参数指定计算距离的不同方式得到不同的距离度量值<br><a href="https://blog.csdn.net/kancy110/article/details/75675574" target="_blank" rel="noopener">https://blog.csdn.net/kancy110/article/details/75675574</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法编程" scheme="https://sunxin18.github.io/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="pyton" scheme="https://sunxin18.github.io/tags/pyton/"/>
    
  </entry>
  
  <entry>
    <title>linux</title>
    <link href="https://sunxin18.github.io/2020/03/12/linux/"/>
    <id>https://sunxin18.github.io/2020/03/12/linux/</id>
    <published>2020-03-12T13:44:06.000Z</published>
    <updated>2020-05-02T13:22:36.779Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="共享文件夹there-no-need"><a href="#共享文件夹there-no-need" class="headerlink" title="共享文件夹there no need"></a>共享文件夹there no need</h1><p>现在本地建立一个文件夹，这里是F:\test然后点击设备–共享文件夹，勾选自动挂载，自动分配，<br>此处我选择在/mnt下创建一个“share”目录，将刚刚的“gongxiang”目录与“share”目录关联起来。<br>进入/mnt：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd/mnt</span><br></pre></td></tr></table></figure></div></p><p>创建share目录：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo makdir share</span><br></pre></td></tr></table></figure></div></p><p>将“test”目录与“share”目录进行关联：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t vboxsf test /mnt/share</span><br></pre></td></tr></table></figure></div></p><h1 id="报错对omp-getnum-threads未定义的引用"><a href="#报错对omp-getnum-threads未定义的引用" class="headerlink" title="报错对omp_getnum_threads未定义的引用"></a>报错对omp_getnum_threads未定义的引用</h1><p><a href="https://stackoverflow.com/questions/9685377/undefined-reference-to-omp-get-max-threads" target="_blank" rel="noopener">https://stackoverflow.com/questions/9685377/undefined-reference-to-omp-get-max-threads</a></p><p><a href="https://stackoverflow.com/questions/9685377/undefined-reference-to-omp-get-max-threads" target="_blank" rel="noopener">https://stackoverflow.com/questions/9685377/undefined-reference-to-omp-get-max-threads</a></p><p>#更改分辨率<br>先使用xrandr命令看下分辨率的索引<br>然后xrandr –size 0<em>0(这是800</em>800的)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="linux" scheme="https://sunxin18.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>say somethingto myself</title>
    <link href="https://sunxin18.github.io/2020/03/10/for-me/"/>
    <id>https://sunxin18.github.io/2020/03/10/for-me/</id>
    <published>2020-03-10T10:30:11.000Z</published>
    <updated>2020-03-10T12:02:58.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="哎呀你输错了！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">该文章已加密, 请输入密码查看。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="4468f32117079e40bc33a8823841de91774a3f1f6688e975a1585ce5a6d730f2">38cd76bef1cf79f27267863aa0f1e10aff0a55b3032fb665653565d974dcbbb6fb9e335fcb6f2cac947609853f0c56f0dbf7300ebc6e47358c153341a4c18fe59abedea6571c7603dd0c3ebeb08faededad4174f6c6eeda32fe389116f16e28f0210187cfa4a272439508fc90658c1b2309a116992d303d700f05971b0e4855d4f4ff589cfc7838359191bd9ee6077a648cc1789b19943078668c653d9694c0c484aaaa3e126d8a153c6e91c689217e97fdcb7997cda884612bdc08273526ce2ae6489c37d097434752f4027a4af6877</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gragh_convolution</title>
    <link href="https://sunxin18.github.io/2020/03/08/gragh-convolution/"/>
    <id>https://sunxin18.github.io/2020/03/08/gragh-convolution/</id>
    <published>2020-03-08T01:57:31.000Z</published>
    <updated>2020-03-08T04:46:30.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="graghsage"><a href="#graghsage" class="headerlink" title="graghsage"></a>graghsage</h1><p>论文链接：<a href="https://arxiv.org/abs/1706.02216" target="_blank" rel="noopener">https://arxiv.org/abs/1706.02216</a></p><p>github链接：<a href="https://github.com/williamleif/GraphSAGE" target="_blank" rel="noopener">https://github.com/williamleif/GraphSAGE</a></p><p>官方介绍链接：<a href="http://snap.stanford.edu/graphsage/" target="_blank" rel="noopener">http://snap.stanford.edu/graphsage/</a></p><p>优秀介绍： <a href="https://blog.csdn.net/yyl424525/article/details/100532849?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/yyl424525/article/details/100532849?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p><h2 id="gcn"><a href="#gcn" class="headerlink" title="gcn"></a>gcn</h2><p>现存的方法需要图中所有的顶点在训练embedding的时候都出现；这些前人的方法本质上是transductive，不能自然地泛化到未见过的顶点。<br><strong>GraphSAGE是为了学习一种节点表示方法，即如何通过从一个顶点的局部邻居采样并聚合顶点特征，而不是为每个顶点训练单独的embedding。</strong><br>GCN虽然能提取图中顶点的embedding，但是存在一些问题：</p><ol><li>GCN的基本思想： 把一个节点在图中的高纬度邻接信息降维到一个低维的向量表示。</li><li>GCN的优点： 可以捕捉graph的全局信息，从而很好地表示node的特征。</li><li>GCN的缺点： Transductive learning的方式，需要把所有节点都参与训练才能得到node embedding，无法快速得到新node的embedding。<br><strong>GCN等transductive的方法，学到的是每个节点的一个唯一确定的embedding； 而GraphSAGE方法学到的node embedding，是根据node的邻居关系的变化而变化的，也就是说，即使是旧的node，如果建立了一些新的link，那么其对应的embedding也会变化，而且也很方便地学到。</strong></li></ol><h1 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h1><p><a href="/2020/03/08/gragh-convolution/1.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/03/08/gragh-convolution/1.png" alt title></a><br>$K$:K是网络的层数，也代表着每个顶点能够聚合的邻接点的跳数，如K=2的时候每个顶点可以最多根据其2跳邻接点的信息学习其自身的embedding表示。每增加一层可以聚合更远节点的信息<br>$N_{(v)}$:GraphSAGE中每一层的节点邻居都是是从上一层网络采样的，并不是所有邻居参与，并且采样的后的邻居的size是固定的<br><a href="/2020/03/08/gragh-convolution/2.png" data-fancybox="group" data-caption class="fancybox"><img src="/2020/03/08/gragh-convolution/2.png" alt title></a><br>其运行流程如上图所示，可以分为三个步骤：</p><ol><li>对图中每个顶点邻居顶点进行采样，因为每个节点的度是不一致的，为了计算高效， 为每个节点采样固定数量的邻居</li><li>根据聚合函数聚合邻居顶点蕴含的信息</li><li>得到图中各顶点的向量表示供下游任务使用</li></ol><h2 id="Neighborhood-definition-采样邻居顶点"><a href="#Neighborhood-definition-采样邻居顶点" class="headerlink" title="Neighborhood definition - 采样邻居顶点"></a>Neighborhood definition - 采样邻居顶点</h2><p>出于对计算效率的考虑，对每个顶点采样一定数量的邻居顶点作为待聚合信息的顶点。设需要的邻居数量，即采样数量为SSS，若顶点邻居数少于SSS,则采用有放回的抽样方法，直到采样出SSS个顶点。若顶点邻居数大于SSS，则采用无放回的抽样。(<strong>即采用有放回的重采样/负采样方法达到SSS</strong>)</p><p>当然，若不考虑计算效率，完全可以对每个顶点利用其所有的邻居顶点进行信息聚合，这样是信息无损的。<br>文中在较大的数据集上实验。因此，统一采样一个固定大小的邻域集，以保持每个batch的计算占用空间是固定的（即 graphSAGE并不是使用全部的相邻节点，而是做了固定size的采样）。</p><p>这样固定size的采样，每个节点和采样后的邻居的个数都相同，可以把每个节点和它们的邻居拼成一个batch送到GPU中进行批训练。<br>论文里说<strong>固定长度的随机游走其实就是随机选择了固定数量的邻居</strong></p><h2 id="聚合函数的选取"><a href="#聚合函数的选取" class="headerlink" title="聚合函数的选取"></a>聚合函数的选取</h2><p>在图中顶点的邻居是无序的，所以希望构造出的聚合函数是对称的（即也就是对它输入的各种排列，函数的输出结果不变），同时具有较高的表达能力。 聚合函数的对称性（symmetry property）确保了神经网络模型可以被训练且可以应用于任意顺序的顶点邻居特征集合上。<br>主要有mean embedding，LSTM,pooling</p><h1 id="代码理解"><a href="#代码理解" class="headerlink" title="代码理解"></a>代码理解</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="图" scheme="https://sunxin18.github.io/categories/%E5%9B%BE/"/>
    
    
      <category term="graghsage" scheme="https://sunxin18.github.io/tags/graghsage/"/>
    
  </entry>
  
</feed>
